/*
 * File: app/controller/RaceSignOffWizard.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMightMobile.controller.RaceSignOffWizard', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            signOffBtn: 'button#signOffBtn',
            homePanel: 'panel#homePanel',
            dnfSelectSignOff: 'selectfield#dnfSelectSignOff',
            undoSignOffBtn: 'button#undoSignOffBtn',
            signOffBoatDivisionCmb: 'selectfield#signOffBoatDivisionCmb',
            boatSignOffSearch: 'searchfield#boatSignOffSearch',
            boatsSignOffView: 'dataview#boatsSignOffView',
            signOffRacesList: 'list#signOffRacesList',
            signOffWizard: 'formpanel#signOnWizard',
            signOffTCForm: 'container#signOffTCForm',
            messagesList: 'list#messagesList',
            racesSignOffList: 'list#racesSignOffList',
            skipperNumber: 'textfield#skipperNumber',
            boatNumberSignOffCmb: 'selectfield#boatNumberSignOffCmb',
            signOffCard: 'formpanel#signOffCard',
            nextSignOffBtn: 'button#nextSignOffBtn',
            boatInfoLbl: 'label#boatInfoLbl',
            signOffTCFirstNameTxt: 'textfield#signOffTCFirstNameTxt',
            signOffTCLastNameTxt: 'textfield#signOffTCLastNameTxt'
        },

        control: {
            "button#signOffBtn": {
                tap: 'onSignOffButtonTap'
            },
            "selectfield#dnfSelectSignOff": {
                change: 'onSelectDNFSignOff'
            },
            "button#undoSignOffBtn": {
                tap: 'onUndoSignOff'
            },
            "button#signOffTCOKBtn": {
                tap: 'onOkTCSignOffTap'
            },
            "button#signOffTCCancelBtn": {
                tap: 'onCancelTCSignOffTap'
            },
            "list#racesSignOffList": {
                select: 'onSignOffRaceListSelect'
            },
            "checkboxfield#signOffRetiring": {
                change: 'onCheckboxfieldChange'
            },
            "button#nextSignOffBtn": {
                tap: 'onNextSignOffButtonTap'
            },
            "dataview#boatsSignOffView": {
                select: 'onBoatViewSelect'
            },
            "selectfield#boatNumberSignOffCmb": {
                change: 'onBoatChange'
            },
            "button#doneSignOffBtn": {
                tap: 'onDoneSignOffTap'
            },
            "list#signOffRacesList": {
                select: 'onListSelect'
            },
            "button#backSignOffBtn1": {
                tap: 'onBackSignOffBtn1Tap'
            }
        }
    },

    onSignOffButtonTap: function(button, e, eOpts) {
        var me = this, vals, items, rec,
            wizard = me.getSignOffWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            record = me.getSignOffRacesList().selected.get(0);

        this.getSignOffTCForm().down('#signOffTCFirstNameTxt').setValue(record.get('firstname'));
        this.getSignOffTCForm().down('#signOffTCLastNameTxt').setValue(record.get('lastname'));
        if(record.raw.signonmessage){
            this.getSignOffTCForm().down('#signOffTCTxt').setValue(record.raw.signoffmessage);
            //debugger;
        }

        if(me.getSignOffRacesList().selected.length > 0){
            wizard.setActiveItem(selectedIndex  + 1);
        }
        return;

        // var me = this;

        // AJAXCommand({
        //     params: {
        //         raceid: me.getPortalRacesList().selected.get(0).get('raceid'),
        //         boatid: me.getBoatNumberCmb().getValue(),
        //         type:'off',
        //         boatstatusid: this.getDnfSelectSignOff().getValue()
        //     },
        //     method: 'SignOffUndoSignOff',
        //     scope: me,
        //     callback: function(status, message, obj, scope) {

        //         if (status) {

        //         }
        //         else
        //         {
        //             Ext.Msg.show({
        //                 title: 'Sign Off Error',//T('errLogIn'),
        //                 message: 'Error!',//T(''),
        //                 buttons: Ext.Msg.OK,
        //                 icon: Ext.Msg.ERROR,
        //                 modal: true
        //             });
        //         }
        //     }
        // });
        // return;
        // var me = this,
        //     wizard = me.getSignOnWizard(),
        //     popup = new Ext.Panel({
        //     //floating: true,
        //     //centered: true,
        //     modal: true,
        //     fullscreen: true,
        //     layout: 'vbox',
        //     itemId: 'popupPnl',
        //     items: [{
        //         xtype: 'list',
        //         store: wizard.raceCompletionStore,
        //         height: 150,
        //         itemId: 'completionsList',
        //         itemTpl: [
        //             '<div>{code}</div>'
        //         ]
        //     },{
        //         xtype: 'container',
        //         layout: 'hbox',
        //         items: [{
        //             xtype: 'button',
        //             itemId: 'cancelPopBtn',
        //             text: 'Cancel',
        //             handler: function(){
        //                 this.up('#popupPnl').destroy();

        //             }
        //         },{
        //             xtype: 'button',
        //             itemId: 'savePopBtn',
        //             text: 'Sign Off',
        //             handler: function(){
        //                 this.up('#popupPnl').destroy();
        //                 AJAXCommand({
        //                     params: {
        //                         raceid: me.getPortalRacesList().selected.get(0).get('raceid'),
        //                         boatid: me.getBoatNumberCmb().getValue(),
        //                         completionid: 1
        //                     },
        //                     method: 'UndoSignOn',
        //                     scope: me,
        //                     callback: function(status, message, obj, scope) {
        //                         //debugger;
        //                         if (status) {

        //                         }
        //                         else
        //                         {
        //                             Ext.Msg.show({
        //                                 title: 'Sign Off Error',//T('errLogIn'),
        //                                 message: 'Error!',//T(''),
        //                                 buttons: Ext.Msg.OK,
        //                                 icon: Ext.Msg.ERROR,
        //                                 modal: true
        //                             });
        //                         }
        //                     }
        //                 });
        //             }
        //         }]
        //     }]

        // }).showBy(button);
    },

    onSelectDNFSignOff: function(selectfield, newValue, oldValue, eOpts) {

    },

    onUndoSignOff: function(button, e, eOpts) {
        var me = this,
            record = me.getSignOffRacesList().selected.get(0);
        //debugger;
        AJAXCommand({
            params: {
                raceid: record.get('raceid'),
                boatid: record.get('boatid')
            },
            method: 'UndoSignOff',
            scope: me,
            callback: function(status, message, obj, scope) {
                //debugger;
                if (status) {
                    me.getSignOffRacesList().getStore().load();
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Sign Off Error',//T('errLogIn'),
                        message: 'Error!',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });
    },

    onOkTCSignOffTap: function(button, e, eOpts) {
        var me = this,
            wizard = me.getSignOffWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            frm = me.getSignOffTCForm();

        if(frm.down('#signOffTCFirstNameTxt').getValue().length == 0 || frm.down('#signOffTCLastNameTxt').getValue().length == 0){
            Ext.Msg.show({
                title: 'Terms & Conditions',//T('errLogIn'),
                message: 'Please complete the form!',//T(''),
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR,
                modal: true
            });
            return;
        }

        me.onSignOff();

        frm.down('#signOffTCFirstNameTxt').setValue('');
        frm.down('#signOffTCLastNameTxt').setValue('');
        //debugger;
        me.getSignOffWizard().down('#boatsSignOffView').getStore().clearFilter(true);
        me.getSignOffWizard().down('#boatsSignOffView').refresh();
        wizard.setActiveItem(0);
    },

    onCancelTCSignOffTap: function(button, e, eOpts) {
        var me = this,
            wizard = me.getSignOffWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem);

        wizard.setActiveItem(selectedIndex - 1);
    },

    onSignOffRaceListSelect: function(dataview, record, eOpts) {
        var me = this,
            mStore = me.getMessagesList().getStore();
            bStore = me.getBoatNumberSignOffCmb().getStore();
            dStore = me.getSignOffBoatDivisionCmb().getStore();


        //debugger;
        //eturn;
        me.race = record;
        me.filterSignOffBoats();

        dStore.clearFilter(true);
        dStore.execConfig({
            params: {
                entityViewID: GetEntityViewByName('DivisionsByRace').entityviewid ,
                filters: "where raceid is null or raceid = '"+record.get('raceid')+"' order by name asc"
            }
        });

        return;

        mStore.clearFilter(true);
        mStore.filter('raceid', record.get('raceid'));



        bStore.clearFilter(true);
        bStore.filter('raceid', record.get('raceid'));



        me.getSignOffBoatDivisionCmb().setStore(dStore);
    },

    onCheckboxfieldChange: function(checkboxfield, newValue, oldValue, eOpts) {
        if(newValue == true){
            this.getSignOffWizard().down('#signOffCodeCmb').setReadOnly(false);
        }
        else {
            this.getSignOffWizard().down('#signOffCodeCmb').setReadOnly(true);
        }
    },

    onNextSignOffButtonTap: function(button, e, eOpts) {
        var me = this, vals, items, rec,
            wizard = me.getSignOffWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            bStore = me.getBoatsSignOffView().getStore(),
            html,
            boat = me.getBoatsSignOffView().selected.get(0);

        wizard.setActiveItem(selectedIndex  + 1);


        bStore.clearFilter(true);
        bStore.filter('boatid', boat.get('boatid'));
        me.getNextSignOffBtn().setDisabled(true);
        /*
        if(me.getRacesSignOnList().selected.length > 0 && me.getBoatNumberCmb().getValue()){
            wizard.setActiveItem(selectedIndex  + 1);
        }
        else{
            Ext.Msg.show({
                title: 'No selection',//T('errLogIn'),
                message: 'Must select a race and a boat!',//T(''),
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR,
                modal: true
            });
        }*/

        html = '<div class="weather-widget" style="margin:5px"><h3>'+boat.get('bname')+'</h3><h2>'
        + ' </h2>'
        + '<p></p><small>'+boat.get('hullnumber')+'</small><p></p></div>';

        me.getBoatInfoLbl().setHtml(html);

        me.boat = boat;

        //debugger;
    },

    onBoatViewSelect: function(dataview, record, eOpts) {
        var me = this,
            rStore = me.getRacesSignOffList().getStore();

        //debugger;
        //return;

        rStore.clearFilter(true);
        rStore.filter('raceid', record.get('raceid'));



        this.getSignOffCard().setValues(record.raw);
        this.getSkipperNumber().setValue(record.raw.ya);
        this.getNextSignOffBtn().enable();

    },

    onBoatChange: function(selectfield, newValue, oldValue, eOpts) {
        //debugger;
        if(newValue){
            this.getSignOffCard().setValues(selectfield.record.raw);
            this.getSkipperNumber().setValue(selectfield.record.raw.ya);
        }
        //debugger;
    },

    onDoneSignOffTap: function(button, e, eOpts) {
        this.getHomePanel().removeAll();

        this.getController('Navigation').onNavigate();
    },

    onListSelect: function(dataview, record, eOpts) {
        this.enableButtons(record);

    },

    onBackSignOffBtn1Tap: function(button, e, eOpts) {
        this.getController('Navigation').onNavigate();
    },

    onSignOff: function(record) {
        var me = this,
            record = me.getSignOffRacesList().selected.get(0),
            propper, retired, code;
        //debugger;
        if(this.getSignOffTCForm().down('#signOffPropperCourse').getChecked()){
            propper =1;
        }
        else {
            propper = 0;
        }
        if(this.getSignOffTCForm().down('#signOffRetiring').getChecked()){
            retired = 1;
            if(this.getSignOffTCForm().down('#signOffCodeCmb').record.data.code){
                code = this.getSignOffTCForm().down('#signOffCodeCmb').record.data.code;
            }
        }
        else {
            retired = 0;
        }
        //debugger;
        AJAXCommand({
            params: {
                raceid: record.get('raceid'),
                boatid: record.get('boatid'),
                firstname: me.getSignOffTCFirstNameTxt().getValue(),
                lastname: me.getSignOffTCLastNameTxt().getValue(),
                code: code ? code : '',
                propper: propper ? propper : '',
                retired: retired ? retired : '',
                type: 'off'
            },
            method: 'SignOnOff',
            scope: me,
            callback: function(status, message, obj, scope) {
                //debugger;
                if (status) {
                    me.getBoatsSignOffView().getStore().load();
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Sign Off Error',//T('errLogIn'),
                        message: 'Error!',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });

        //record.set('signondate', new Date());

    },

    filterSignOffBoats: function(withoutSelection) {
        //debugger;
        var me = this,
            filters = [],
            division = me.getSignOffBoatDivisionCmb().getValue(),
            searchField = me.getBoatSignOffSearch(),
            storeB = me.getBoatsSignOffView().getStore();

        me.getBoatsSignOffView().getStore().clearFilter(true);
        //debugger;

        if(division){
            filters.push({property: 'divisionid', value: division});
        }

        if(me.race){
            filters.push({property: "raceid", value: me.race.get('raceid')});
        }

        if(searchField.getValue()){
            filters.push({filterFn: BoatFilter, scope: searchField});
        }


        storeB.filter(filters);

        if(storeB.getCount() > 0 && !withoutSelection){
            var tmp = storeB.findExact('hullnumber', searchField.getValue());
            if(tmp > -1){
                me.getBoatsSignOffView().select(storeB.getAt(tmp));
            }
            else
                me.getBoatsSignOffView().select(storeB.getAt(0));
        }


    },

    enableButtons: function(record) {

        if(record.get('signoffdate')){
                this.getSignOffBtn().disable();
                this.getUndoSignOffBtn().enable();
            }

            else if(!record.get('signondate')){
                this.getSignOffBtn().disable();
                this.getUndoSignOffBtn().disable();
            }
                else {
                    this.getSignOffBtn().enable();
                    this.getUndoSignOffBtn().disable();
                }

        // else if (this.getSignOffBtn())
        // {
        //     if(record.get('boatstatusid')){
        //         this.getSignOffBtn().disable();
        //         this.getUndoSignOffBtn().enable();
        //     }
        //     else{
        //         this.getSignOffBtn().enable();
        //         this.getUndoSignOffBtn().disable();
        //     }
        // }



    }

});