/*
 * File: app/controller/RegistrationWizard.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMightMobile.controller.RegistrationWizard', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            registrationWizard: 'container#seriesWizardId',
            registrationLoginFrm: 'formpanel#registrationLoginFrm',
            boatDetails: 'formpanel#detailsPnl',
            seriesList: 'list#seriesList',
            entriesList: 'list#entriesList',
            seriesRadio: 'radiofield#seriesRadio',
            registrationTypeFS: 'fieldset#registrationTypeFS',
            seriesAvailable: 'formpanel#seriesAvailable',
            serieRacesList: 'list#serieRacesList',
            boatRacesList: 'list#boatRacesList',
            seriesDetails: 'formpanel#seriesDetails',
            raceDetails: 'formpanel#raceDetails',
            homePanel: 'panel#homePanel',
            reviewCard: 'formpanel#reviewCard',
            rRaceDivisionsList: 'list#rRaceDivisionsList',
            rDivisionsList: 'list#rDivisionsList',
            individualRadio: 'radiofield#individualRadio',
            regBoatLbl: 'label#regBoatLbl',
            detailsTab: 'container#detailsTab',
            bDTabPanel: 'tabpanel#registrationTabPnl',
            bottomTabCt: 'container#bottomTabCt',
            continueBtn: 'button#continueBtn',
            addRemButtonsCt: 'container#addRemButtonsCt',
            removeRaceBtn: 'button#removeRaceBtn',
            addRaceBtn: 'button#addRaceBtn',
            skiperYATxt: 'textfield#skiperYATxt',
            skipperList: 'list#skipperList',
            ownerInfoFS: 'fieldset#ownerInfoFS',
            skipperInformationToolbar: 'toolbar#skipperInformationToolbar',
            newBoatDetails: 'formpanel#newBoatPnl'
        },

        control: {
            "button#loginNextBtn": {
                tap: 'onLoginNextButtonTap'
            },
            "button#newRegistrationBtn": {
                tap: 'onNewRegistrationButtonTap'
            },
            "button#nextSBtn": {
                tap: 'onNextSButtonTap'
            },
            "button#nextSeriesBtn": {
                tap: 'onNextSeriesButtonTap'
            },
            "button#nextRaceBtn": {
                tap: 'onNextRaceButtonTap'
            },
            "button#backBoatBtn": {
                tap: 'onBackBoatButtonTap'
            },
            "button#boatLoginNextBtn": {
                tap: 'onBoatLoginNextButtonTap'
            },
            "button#continueBtn": {
                tap: 'onContinueButtonTap'
            },
            "button#saveBoatBtn": {
                tap: 'onSaveBoatButtonTap'
            },
            "button#addRaceBtn": {
                tap: 'onAddRaceButtonTap'
            },
            "button#removeRaceBtn": {
                tap: 'onRemoveRaceButtonTap'
            },
            "button#nextSaveRacesBtn": {
                tap: 'onNextSaveRacesButtonTap'
            },
            "button#exitBtn": {
                tap: 'onExitButtonTap'
            },
            "selectfield#skipperCmb": {
                change: 'onSkipperSelectfieldChange'
            },
            "button#nextRaceDBtn": {
                tap: 'onRaceDivisionNextButtonTap'
            },
            "button#addRDivisionBtn": {
                tap: 'onAddRDivisionButtonTap'
            },
            "button#allRDivisionsBtn": {
                tap: 'onAllRDivisionButtonTap'
            },
            "button#delRDivisionBtn": {
                tap: 'onDelRDivisionButtonTap'
            },
            "button#newBoatBtn": {
                tap: 'onNewBoatButtonTap'
            },
            "button#cancelBoatBtn": {
                tap: 'onCancelBoatButtonTap'
            },
            "button#registrationBackBtn": {
                tap: 'onBackButtonTap'
            },
            "tabpanel#registrationTabPnl": {
                activeitemchange: 'onTabpanelActiveItemChange'
            },
            "list#entriesList": {
                select: 'onSeriesListSelect'
            },
            "radiofield#individualRadio": {
                change: 'onRadiofieldChange'
            },
            "list#skipperList": {
                itemtap: 'onItemSkiperListTap'
            },
            "button#saveNewBoatBtn": {
                tap: 'onNewBoatSaveButtonTap'
            },
            "button#cancelNewBoatBtn": {
                tap: 'onCancelNewBoatButtonTap'
            },
            "button#backLoginBtn1": {
                tap: 'onBackLoginBtn1Tap'
            }
        }
    },

    onLoginNextButtonTap: function(button, e, eOpts) {
        var me = this, vals,
            form = me.getRegistrationLoginFrm(),
            name = form.down('#name').getValue();

        me.wizard = me.getRegistrationWizard();

        me._wizard = {};


        //debugger;

        AJAXCommand({
            params: {
                name: name,
                password: form.down('#password').getValue()
            },
            method: 'BoatLogin',
            scope: me,
            callback: function(status, message, obj, scope) {
                //debugger;
                if (status) {
                    if(obj.boat.length < 1){
                        Ext.Msg.show({
                            title: 'Boat login in',//T('errLogIn'),
                            message: 'Boat name or password is incorect!',//T(''),
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR,
                            modal: true
                        });
                    }
                    else{
                        me.jumpCards(1);
                        me.onBoatLogin(obj);
                    }
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Sign in',//T('errLogIn'),
                        message: 'Sing in error!',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });


    },

    onNewRegistrationButtonTap: function(button, e, eOpts) {
        var me = this;

        if(me._wizard.boat){


            this.jumpCards(1);
        }

    },

    onNextSButtonTap: function(button, e, eOpts) {
        var me = this,
            val = me.getSeriesAvailable().getValues().registrationRadio,
            params;

        //debugger;
        if(me.getSeriesList().selected.length  ==  0){
            //todo message
            return;
        }

        me.jumpCards(1);


        me._wizard.series = me.getSeriesList().selected.get(0);

        me.filterStores();
    },

    onNextSeriesButtonTap: function(button, e, eOpts) {
        var me = this,
            rev = me.getReviewCard(),
            status = rev.down('#statusTxt'),
            cost = rev.down('#costTxt');

        me.isFormValid = true;

        me.checkRequiredControls(me.getSeriesDetails());

        if(!me.isFormValid){
            return;
        }

        //debugger;
        AJAXCommand({
            params: me.getSeriesDetails().getValues(),
            method: 'UpdateSkipper',
            scope: me,
            callback: function(status, message, obj, scope) {
                //debugger;
                if (status) {

                }
                else
                {
                    Ext.Msg.show({
                        title: 'Skipper save',//T('errLogIn'),
                        message: 'Error!',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });

        status.setValue(me._wizard.series.get('status') || 'New');
        cost.setValue(me._wizard.series.raw.entrycost);
        //debugger;

        this.jumpCards(1);
    },

    onNextRaceButtonTap: function(button, e, eOpts) {
        this.jumpCards(1);
    },

    onBackBoatButtonTap: function(button, e, eOpts) {

        this.jumpCards(-1);
        //this.jumpCards(null, 1);
        //this.onBoatSeries();
    },

    onBoatLoginNextButtonTap: function(button, e, eOpts) {
        this.jumpCards(1);
    },

    onContinueButtonTap: function(button, e, eOpts) {
        //debugger;
        var me = this,
            type;



        if(me.getEntriesList().selected.length  > 0){

            me._wizard.series = this.getEntriesList().selected.get(0);

            type = me._wizard.series.get('type');

            //debugger;
            if(type == 'Race Entry'){
                me.getIndividualRadio().check();
            }else{
                me.getSeriesRadio().check();
            }

            me.filterStores();

            me.jumpCards(type == 'Race Entry' ? 2 : 3);

        }
    },

    onSaveBoatButtonTap: function(button, e, eOpts) {
        //debugger;
        if(!this.getBoatDetails())
        {
            //we save boat from boat details
            return;
        }
        var me = this, item, values,
            form = this.getBoatDetails(),
            items = form.getItems().items,
            bStore = CreateStore('boat');
        //debugger;

        me.isFormValid = true;

        me.checkRequiredControls(form);

        if(!me.isFormValid){
            return;
        }

        rec = form.getValues();
        rec.EntityFields = bStore._model.prototype.entityFields;
        rec.EntityName = 'boat';

        if(me._wizard.boat){
            bStore.execConfig({
                method: 'EditEntity',
                params: rec,
                callback: function(store, a, b, c){
                    me.onBoatSeries();
                }
            });


            var html = '<div class="weather-widget" style="margin:5px"><h3>'+ rec.name +'</h3><h2>'
            + ' </h2>'
            + '<p></p><small>' + rec.hullnumber +'</small><p></p></div>';

            me.getRegBoatLbl().updateHtml(html);
            //debugger;
        }
        else{
            AJAXCommand({
                params: rec,
                method: 'SaveBoat',
                scope: me,
                callback: function(status, message, obj, scope) {
                    //debugger;
                    if (status) {
                        //debugger;
                        me._wizard.boat = {};
                        me._wizard.boat.boatid = obj.result.boatid;
                        me._wizard.boat.name = rec.name;
                        me._wizard.boat.hullnumber = rec.hullnumber;
                        me.getBoatDetails().down('#boatid').setValue(obj.result.boatid);
                        me.onBoatSeries();
                    }
                    else
                    {
                        Ext.Msg.show({
                            title: 'Save boat',//T('errLogIn'),
                            message: 'Error!',//T(''),
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR,
                            modal: true
                        });
                    }
                }
            });
        }



    },

    onAddRaceButtonTap: function(button, e, eOpts) {
        var me = this, race,
            rList = me.getSerieRacesList(),
            rStore = rList.getStore(),
            rbStore = me.getBoatRacesList().getStore();

        if(rList.selected.length > 0 && rbStore.find('raceid', rList.selected.get(0).get('raceid')) < 0){
            race = rList.selected.get(0);

            rbStore.insert(0, {
                raceid: race.get('raceid'),
                boatid: me._wizard.boat.boatid,
                rname: race.get('name'),
                raceseriesid: me._wizard.series.get('raceseriesid')
            });

            rStore.remove(race);
        }
    },

    onRemoveRaceButtonTap: function(button, e, eOpts) {
        var me = this, race,
            rbList = me.getBoatRacesList(),
            rbStore = rbList.getStore(),
            rAllStore = me.getSerieRacesList().getStore();
        //debugger;
        if(rbList.selected.length > 0){
            race = rbList.selected.get(0);

            rbStore.remove(race);

            rAllStore.insert(0, {
                raceid: race.get('raceid'),
                name: race.get('rname'),
                raceseriesid: me._wizard.series.get('raceseriesid')
            });

        }
    },

    onNextSaveRacesButtonTap: function(button, e, eOpts) {
        var me = this, race,
            rbList = me.getBoatRacesList(),
            rbStore = rbList.getStore(),
            boatRaces = rbStore.getAllRecords(),
            count = rbStore.getCount(),
            rev = me.getReviewCard(),
            status = rev.down('#statusTxt'),
            cost = rev.down('#costTxt'),
            val = me.getRaceDetails().getValues().registrationRadio,
            params = {},type;
        //debugger;
        me.getSkipperInformationToolbar().setHidden(true);
        status.setValue(me._wizard.series.get('status') || 'New');

        cost.setValue(me._wizard.series.raw.raceentrycost * count);

        type = (val == 'seriesRadio') ? 'Series Entry' : 'Race Entry';

        if(!me._wizard.series.get('raceseriesboatid'))
        {
            params = me.getSeriesList().selected.get(0).data;
            params.type = type;
            params.boatid = me._wizard.boat.boatid;


            AJAXCommand({
                params: params,
                method: 'SaveBoatSeries',
                scope: me,
                callback: function(status, message, obj, scope) {
                    //debugger;
                    if (status) {
                        //debugger;
                        me._wizard.series.data.raceseriesboatid = obj.result.raceseriesboatid;
                        me.filterStores();
                        me.jumpCards(1);
                        //me.jumpCards(val == 'seriesRadio' ? 1 : 2);
                    }
                    else
                    {
                        Ext.Msg.show({
                            title: 'Registration',//T('errLogIn'),
                            message: 'Error!',//T(''),
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR,
                            modal: true
                        });
                    }
                }
            });
        }
        else{
            me.jumpCards(1);
        }
        return;

        if(type == 'Race Entry' || me._wizard.series.get('raceseriesboatid')){
            AJAXCommand({
                params: {
                    boatraces: boatRaces,
                    boatid: me._wizard.boat.boatid,
                    raceseriesid: me._wizard.series.get('raceseriesid')
                },
                method: 'SaveBoatRaces',
                callback: function(status, message, obj, scope) {
                    if (status) {
                        me.jumpCards(1);
                    }
                    else
                    {
                        Ext.Msg.show({
                            title: 'Races save',//T('errLogIn'),
                            msg: 'Error.',//T(''),
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR,
                            modal: true
                        });
                    }
                }
            });
        }

    },

    onExitButtonTap: function(button, e, eOpts) {
        this.getHomePanel().removeAll();

        DynaMightMobile.app.getController('Navigation').applyClass('RegistrationWizard');
    },

    onSkipperSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        //debugger;
        if(newValue){
            this.getSeriesDetails().setValues(selectfield.record.data);
        }
    },

    onRaceDivisionNextButtonTap: function(button, e, eOpts) {
        var me = this,
            params = {},
            rbList = me.getBoatRacesList(),
            rbStore = rbList.getStore(),
            boatRaces = rbStore.getFilteredRecords(),
            divisions = me.getRRaceDivisionsList().getStore().getAllRecords();


        if(divisions.length < 1){
            Ext.Msg.alert('Division','Must select a division!');
            /*Ext.Msg.show({
                title: 'Division',//T('errLogIn'),
                msg: 'Must select a division!',//T(''),
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR,
                modal: true
            });*/
            return;
        }

        //params = me.getSeriesList().selected.get(0).data;
        params.boatid = me._wizard.boat.boatid;

        AJAXCommand({
                params: {
                    boatraces: boatRaces,
                    boatid: me._wizard.boat.boatid,
                    raceseriesid: me._wizard.series.get('raceseriesid'),
                    divisions: divisions
                },
                method: 'SaveBoatRaces',
                callback: function(status, message, obj, scope) {
                    if (status) {
                        //me.jumpCards(1);
                    }
                    else
                    {
                        Ext.Msg.show({
                            title: 'Races save',//T('errLogIn'),
                            msg: 'Error.',//T(''),
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR,
                            modal: true
                        });
                    }
                }
            });

        this.jumpCards(-6);
    },

    onAddRDivisionButtonTap: function(button, e, eOpts) {
        var list = this.getRDivisionsList(),
            selected = list.getSelection(),
            raceDivisionsList = this.getRRaceDivisionsList(),
            store = raceDivisionsList.getStore(),
            idx;

        if (selected.length > 0) {
            store.add(selected);
            list.getStore().remove(selected);
        }
    },

    onAllRDivisionButtonTap: function(button, e, eOpts) {
        var list = this.getRDivisionsList(),
            all = list.getStore().getRange(),
            raceDivisionsList = this.getRRaceDivisionsList(),
            store = raceDivisionsList.getStore(),
            idx;

        if (all.length > 0) {
            store.add(all);
        }
    },

    onDelRDivisionButtonTap: function(button, e, eOpts) {
        var list = this.getRRaceDivisionsList(),
            selected = list.getSelection(),
            store = list.getStore(),
            idx,
            allStore = this.getRDivisionsList().getStore();

        if (selected.length > 0) {

            allStore.add(selected);
            store.remove(selected);

        }
    },

    onNewBoatButtonTap: function(button, e, eOpts) {
        var me = this;

        me.wizard = me.getRegistrationWizard();
        me._wizard = {};

        //me.getBDTabPanel().setActiveItem(1);
        me.jumpCards(7);
    },

    onCancelBoatButtonTap: function(button, e, eOpts) {
        if(button.up('#popupPnl')){
            button.up('#popupPnl').destroy();
        }

    },

    onBackButtonTap: function(button, e, eOpts) {
        this.jumpCards(-1);
    },

    onTabpanelActiveItemChange: function(container, value, oldValue, eOpts) {
        if (!value.getItemId) return ;

        if(value.getItemId() == 'detailsTab')
            this.getBottomTabCt().hide();
        else
            this.getBottomTabCt().show();
    },

    onSeriesListSelect: function(dataview, record, eOpts) {
        this.getContinueBtn().setDisabled(record.get('type') == 'Series Entry');
    },

    onRadiofieldChange: function(checkboxfield, newValue, oldValue, eOpts) {
        //debugger;

        var me = this,
            race,
            isIndividual = newValue,
            rbStore = me.getBoatRacesList().getStore(),
            rAllStore = me.getSerieRacesList().getStore(),
            records = isIndividual ? rbStore.getRange() : rAllStore.getRange();

        me.getRemoveRaceBtn().setDisabled(!isIndividual);
        me.getAddRaceBtn().setDisabled(!isIndividual);

        for (var i = 0; i <  records.length; i++) {

            race = records[i];

            if(isIndividual){
                rbStore.remove(race);

                rAllStore.insert(0, {
                    raceid: race.get('raceid'),
                    name: race.get('rname'),
                    raceseriesid: me._wizard.series.get('raceseriesid')
                });
            }
            else {
                rbStore.insert(0, {
                    raceid: race.get('raceid'),
                    boatid: me._wizard.boat.boatid,
                    rname: race.get('name'),
                    raceseriesid: me._wizard.series.get('raceseriesid')
                });

                rAllStore.remove(race);
            }

        }




    },

    onItemSkiperListTap: function(dataview, index, target, record, e, eOpts) {
        var r = record,
            me = this,
            rbList = me.getBoatRacesList();

        if(!rbList)
        {
            return;
        }
        var rbStore = rbList.getStore(),
            boatRaces = rbStore.getFilteredRecords(),
            crewmemberid = record.get('crewmemberid');


        for (var i=0;i<boatRaces.length;i++){
            boatRaces[i].crewmemberid = crewmemberid ;
        }
    },

    onNewBoatSaveButtonTap: function(button, e, eOpts) {
        //debugger;
        if(!this.getNewBoatDetails())
        {
            //we save boat from boat details
            return;
        }
        var me = this, item, values,
            form = this.getNewBoatDetails(),
            items = form.getItems().items,
            bStore = CreateStore('boat');
        //debugger;

        me.isFormValid = true;

        me.checkRequiredControls(form);

        if(!me.isFormValid){
            return;
        }

        rec = form.getValues();
        rec.EntityFields = bStore._model.prototype.entityFields;
        rec.EntityName = 'boat';


        AJAXCommand({
            params: rec,
            method: 'SaveBoat',
            scope: me,
            callback: function(status, message, obj, scope) {
                //debugger;
                if (status) {
                    //debugger;
                    me._wizard.boat = {};
                    me._wizard.boat.boatid = obj.result.boatid;
                    me._wizard.boat.name = rec.name;
                    me._wizard.boat.hullnumber = rec.hullnumber;
                    me.getBoatDetails().down('#boatid').setValue(obj.result.boatid);
                    me.onBoatSeries();
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Save boat',//T('errLogIn'),
                        message: 'Error!',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });





        this.jumpCards(-7);
    },

    onCancelNewBoatButtonTap: function(button, e, eOpts) {
        this.jumpCards(-7);
    },

    onBackLoginBtn1Tap: function(button, e, eOpts) {
        this.getController('Navigation').onNavigate();
    },

    onBoatLogin: function(obj) {
        var me = this,
            html,
            raceStore = CreateStore("race"),
            boatStore = CreateStore("boat");
        //debugger;

        try{
        if(obj.boat.length > 0){
            me._wizard.boat = obj.boat[0];
            //me._wizard.boatStore = boatStore;
            //boatStore.applyData(me._wizard.boat);
            if(me._wizard.boat.coverstart)
                me._wizard.boat.coverstart = new Date(me._wizard.boat.coverstart);

            if(me._wizard.boat.coverend)
                me._wizard.boat.coverend = new Date(me._wizard.boat.coverend);

            //debugger;
            me.getBoatDetails().setValues(me._wizard.boat);
            me.getSeriesDetails().down('#skiperYATxt').setValue(me._wizard.boat.ya);
            DynaMightMobile.app.getController('SkipperInformation').searchSkipper();

            me.onBoatSeries();
        }


        raceStore.applyData(obj.races);
        //me.getSeriesRacesList().setStore(raceStore);
        me.getSerieRacesList().setStore(raceStore);


        }
        catch(e){
            alert(e);
        }
    },

    jumpCards: function(no, cardNo) {
        var me = this, vals,
            selectedIndex = me.wizard.items.indexOf(me.wizard._activeItem);

        no = no ? (selectedIndex + no) : cardNo;

        //me.wizard.setActiveItem(no);
        me.wizard.animateActiveItem(no,
          {type: 'slide', direction: selectedIndex > no? 'right' : 'left'});
        //debugger;
    },

    filterStores: function() {
        //debugger;
        var me = this,
            rList = me.getSerieRacesList(),
            rbList = me.getBoatRacesList(),
            //srList = me.getSeriesRacesList(),
            //srStore = srList.getStore(),
            rStore = rList.getStore(),
            rbStore = rbList.getStore();

        rStore.clearFilter(true);
        rbStore.clearFilter(true);
        //srStore.clearFilter(true);

        rStore.filter('raceseriesid', me._wizard.series.get('raceseriesid'));
        rbStore.filter('raceseriesid', me._wizard.series.get('raceseriesid'));
        //srStore.filter('raceseriesid', me._wizard.series.get('raceseriesid'));

        //fill skipper
        //debugger;
        //me.getSeriesDetails().reset();
        //me.getRaceDetails().reset();
        //me.getSeriesDetails().setValues(me._wizard.series.data);
        //me.getRaceDetails().setValues(me._wizard.series.data);
    },

    onBoatSeries: function() {
        var me = this,
            boatSeriesStore = CreateStore("raceseriesboat"),
            raceSeriesStore = CreateStore("raceseries"),
            boatRacesStore = CreateStore("raceboat"),
            html;


        html = '<div class="weather-widget" style="margin:5px"><h3>'+ me._wizard.boat.name +'</h3><h2>'
        + ' </h2>'
        + '<p></p><small>' + me._wizard.boat.hullnumber +'</small><p></p></div>';

        me.getRegBoatLbl().setHtml(html);


        AJAXCommand({
            params:  me._wizard.boat.boatid,
            method: 'BoatSeries',
            scope: me,
            callback: function(status, message, obj, scope) {
                //debugger;
                if (status) {
                    boatSeriesStore.applyData(obj.boatentries);
                    me.getEntriesList().setStore(boatSeriesStore);
                    me.getEntriesList().selected = new Ext.util.MixedCollection();

                    raceSeriesStore.applyData(obj.availableseries);
                    me.getSeriesList().setStore(raceSeriesStore);
                    me.getSeriesList().selected = new Ext.util.MixedCollection();

                    boatRacesStore.applyData(obj.registeredraces);
                    me.getBoatRacesList().setStore(boatRacesStore);

                }
                else
                {
                    Ext.Msg.show({
                        title: 'Load boat series',//T('errLogIn'),
                        message: 'Error!',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });
    },

    checkRequiredControls: function(control) {
        var me = this,
            items = control.getItems().items;



        for (var i = 0; i <  items.length; i++) {

            item = items[i];
            if(item.initialConfig.required && !item.getValue()){
                Ext.Msg.show({
                    title: 'Empty field',//T('errLogIn'),
                    message: item.getLabel() + ' is required!',//T(''),
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.ERROR,
                    modal: true
                });
                me.isFormValid = false;
            }
            else if(item.getItems){
                me.checkRequiredControls(item);
            }

        }
    }

});