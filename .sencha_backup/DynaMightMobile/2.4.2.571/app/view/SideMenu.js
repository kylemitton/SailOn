/*
 * File: app/view/SideMenu.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMightMobile.view.SideMenu', {
    extend: 'Ext.Container',
    alias: 'widget.sidemenu',

    config: {
        open: false,
        xtype: 'mainmenu',
        defaultType: 'button',
        bottom: 0,
        cls: 'mainmenu',
        docked: 'right',
        height: '100%',
        itemId: 'sideMenuContainer',
        left: 0,
        padding: '5 0 0 5',
        right: 0,
        width: 200,
        zIndex: 0,
        scrollable: 'vertical'
    },

    setParent: function(parent) {
        this.callParent(arguments);
        this.maskCmp = parent.add({
             xtype   : 'component',
            cls     : 'mainmenu-mask',
            top     : 0,
            zIndex  : 5000,
            hidden  : true,
            width   : 9999,
            left    : this.getWidth(),
            bottom  : 0
        });

        this.maskCmp.element.on({
            scope   : this,
            touchend: 'onMaskRelease'
        });
    },

    onMaskRelease: function() {
        this.setOpen(false);
    },

    onDestroy: function() {
        this.maskCmp.destroy();
        delete this.maskCmp;

        this.callParent(arguments);
    },

    toggle: function(hide) {
        var setHidden = this.getOpen();
        if (hide)
            setHidden = hide;
        this.setOpen(!setHidden);
    },

    updateOpen: function(open) {
        var targetEl,
            parentCt = this.up();

        if (!parentCt) {
            return;
        }

        targetEl = parentCt.innerElement;

        if (open) {
            targetEl.translate(this.getWidth(), 0, 0);
            this.maskCmp.show();
        }
        else {
            targetEl.translate(0, 0, 0);
            this.maskCmp.hide();

        }
    },

    initialize: function() {
        this.callParent();

    }

});