/*
 * File: app/controller/RaceFinishWizard.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMightMobile.controller.RaceFinishWizard', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            raceFinishWizard: 'formpanel#raceFinishWizardId',
            entrantsFinishList: 'dataview#entrantsFinishList',
            todayFinishRacesList: 'list#todayFinishRacesList',
            finishRacesList: 'list#finishRacesList',
            boatsView: 'dataview#boatsView',
            boatsFinishView: 'dataview#boatsFinishView',
            homePanel: 'panel#homePanel',
            fRacesList: 'list#fRacesList',
            raceBoatsReviewList: 'dataview#raceBoatsReviewList',
            nextFinishRacesBtn: 'button#genericNextBtn',
            bFinishBtn: 'button#bFinishBtn',
            bUndoBtn: 'button#bUndoBtn',
            reviewApplyBtn: 'button#reviewApplyBtn',
            boatDivisionCmb: 'selectfield#boatDivisionCmb',
            reviewDivisionCmb: 'selectfield#reviewDivisionCmb',
            boatSearch: 'searchfield#boatSearch',
            abbandonRaceBtn: 'button#abbandonRaceBtn',
            outOfTimeBtn: 'button#outOfTimeBtn',
            undoRaceBtn: 'button#undoRaceBtn',
            bTopBtn: 'button#bTopBtn',
            sListChk: 'selectfield#sListChk',
            tempBoatsView: 'dataview#tempBoatsView',
            rFReview: 'formpanel#rfReviewFrm',
            datePicker: 'datepickerfield#datePicker'
        },

        control: {
            "button#nextFinishRacesBtn": {
                tap: 'onNextButtonTap'
            },
            "button#nextBoatsFinishBtn": {
                tap: 'onNextBoatsButtonTap'
            },
            "list#todayFinishRacesList": {
                select: 'onTodayRacesListSelect'
            },
            "button#finishAddBtn": {
                tap: 'onAddButtonTap'
            },
            "button#bFinishBtn": {
                tap: 'onFinishButtonTap'
            },
            "button#finalizeResultsBtn": {
                tap: 'onFinishResultsButtonTap'
            },
            "button#statusRaceBtn": {
                tap: 'onEndRaceButtonTap'
            },
            "button#abbandonRaceBtn": {
                tap: 'onAbandonButtonTap'
            },
            "selectfield#raceStatusCmb": {
                change: 'onBoatStatusSelectfieldChange'
            },
            "searchfield#boatSearch": {
                keyup: 'onBoatSearchfieldChange'
            },
            "button#bTopBtn": {
                tap: 'onMoveToTopButtonTap'
            },
            "button#finishDelBtn": {
                tap: 'onDelButtonTap'
            },
            "button#backResultsBtn": {
                tap: 'onBackReviewButtonTap'
            },
            "button#adjustTimeBtn": {
                tap: 'onAdjustButtonTap'
            },
            "selectfield#sListChk": {
                change: 'onSelectfieldChange'
            },
            "dataview#raceBoatsReviewList": {
                select: 'onDataviewSelect'
            },
            "button#fUndoBtn": {
                tap: 'onUndoButtonTap'
            },
            "dataview#boatsView": {
                itemtap: 'onBoatsItemTap'
            },
            "dataview#tempBoatsView": {
                itemtap: 'onBoatsTempTap'
            },
            "dataview#boatsFinishView": {
                itemtap: 'onBoatsFinishItemTap'
            },
            "button#reviewApplyBtn": {
                tap: 'onReviewApplyButtonTap'
            },
            "button#undoRaceBtn": {
                tap: 'onUndoRaceButtonTap'
            },
            "button#outOfTimeBtn": {
                tap: 'onOutOfTimeButtonTap'
            },
            "selectfield#boatDivisionCmb": {
                change: 'onBoatSelectfieldChange'
            },
            "list#fRacesList": {
                selectionchange: 'onRaceControlListChange'
            },
            "tabpanel#raceFinishBoatRaceTabPanel": {
                activeitemchange: 'onTabpanelActiveItemChange'
            },
            "selectfield#boatTime": {
                change: 'onChangeTime'
            },
            "selectfield#reviewDivisionCmb": {
                change: 'onReviewDivisionCmb'
            },
            "button#addTempBtn": {
                tap: 'onAddTempButtonTap'
            },
            "button#removeTempBtn": {
                tap: 'onRemoveTempButtonTap'
            },
            "button#finishAllBtn": {
                tap: 'onFinishAllButtonTap'
            },
            "button#k1Btn": {
                tap: 'onKey1ButtonTap'
            },
            "button#k2Btn": {
                tap: 'onKey2ButtonTap'
            },
            "button#k3Btn": {
                tap: 'onKey3ButtonTap'
            },
            "button#k4Btn": {
                tap: 'onKey4ButtonTap'
            },
            "button#k5Btn": {
                tap: 'onKey5ButtonTap'
            },
            "button#k6Btn": {
                tap: 'onKey6ButtonTap'
            },
            "button#k7Btn": {
                tap: 'onKey7ButtonTap'
            },
            "button#k8Btn": {
                tap: 'onKey8ButtonTap'
            },
            "button#k9Btn": {
                tap: 'onKey9ButtonTap'
            },
            "button#k0Btn": {
                tap: 'onKey0ButtonTap'
            },
            "button#kBackBtn": {
                tap: 'onKeyBackButtonTap'
            },
            "button#kClearBtn": {
                tap: 'onKeyClearButtonTap'
            },
            "datepickerfield#datePicker": {
                change: 'onReviewDateChange'
            },
            "datepicker#mydatepicker9": {
                change: 'onDatepickerChange'
            }
        }
    },

    onNextButtonTap: function(button, e, eOpts) {
        var me = this;
        if(me.getFinishRacesList().getStore().getCount() > 0 ){
            this.jumpCards(1);
        }
        else{
            Ext.Msg.show({
                title: 'No selection',//T('errLogIn'),
                message: 'Must select a race!',//T(''),
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR,
                modal: true
            });
        }



    },

    onNextBoatsButtonTap: function(button, e, eOpts) {
        this.jumpCards(1);
    },

    onTodayRacesListSelect: function(dataview, record, eOpts) {
        //debugger;
        var me = this;
        this.raceid = record.get('raceid');
        this.getEntrantsFinishList().getStore().clearFilter(true);
        this.getEntrantsFinishList().getStore().filter('raceid', record.get('raceid'));
        // dStore = me.getBoatDivisionCmb().getStore();
        // dStore.clearFilter(true);
        // dStore.execConfig({
        //     params: {
        //         entityViewID: GetEntityViewByName('DivisionsByRace').entityviewid ,
        //         filters: "where raceid is null or raceid = '"+record.get('raceid')+"' order by name asc"
        //     }
        // });

    },

    onAddButtonTap: function(button, e, eOpts) {
        var list = this.getTodayFinishRacesList(),
            selected = list.getSelection(),
            raceList = this.getFinishRacesList(),
            store = raceList.getStore(),
            idx;
        if (selected.length > 0) {
            store.add(selected);
        }

        if(store.getCount() > 0){
            this.getNextFinishRacesBtn().enable();
        }
    },

    onFinishButtonTap: function(button, e, eOpts) {
        var me = this,
            isFinish = button.getText() == 'Finish',
            list = isFinish ? me.getBoatsView() : me.getBoatsFinishView(),
            selected = list.getSelection(),
            bStore = list.getStore(),
            removeList = isFinish ? me.getBoatsFinishView() : me.getBoatsView(),
            store = removeList.getStore(),
            idx,
            selectedF = me.getTempBoatsView().getSelection(),
            storeF = me.getTempBoatsView().getStore();

        if (selected.length > 0) {
            rec = selected[0];
            rec.set('endtime', Ext.Date.format(new Date(), 'Y-m-d H:i:s'));
            store.add(selected[0]);
            bStore.remove(selected[0]);
        }

        if (selectedF.length > 0) {
            rec = selectedF[0];
            rec.set('endtime', Ext.Date.format(new Date(), 'Y-m-d H:i:s'));
            store.add(selectedF[0]);
            storeF.remove(selectedF[0]);
        }
        //debugger;
        //this.getBoatsView().getStore().clearFilter(true);
        me.getBoatSearch().setValue('');

        //this.getBoatDivisionCmb().setValue(this.getBoatDivisionCmb().getStore().getAt(0));

        me.filterBoats(true);
    },

    onFinishResultsButtonTap: function(button, e, eOpts) {
        var me = this,
            races = this.races.getAllRecords(),
            raceBoats = this.raceBoats.getStore().getAllRecords(),
            fields = [];


        Ext.Msg.confirm("Confirm finish", "Are you sure you want to finish the race?", function(btn){
            if (btn == 'yes'){
                AJAXCommand({
                    params: {
                        raceboat: raceBoats,
                        races: races,
                        fields: fields
                    },
                    method: 'SaveFinish',
                    callback: function(status, message, obj, scope) {
                        if (status) {

                        }
                        else
                        {
                            Ext.Msg.show({
                                title: 'Error saving Series',//T('errLogIn'),
                                msg: 'Error.',//T(''),
                                buttons: Ext.Msg.OK,
                                icon: Ext.Msg.ERROR,
                                modal: true
                            });
                        }
                    }
                });

                me.getHomePanel().removeAll();

                DynaMightMobile.app.getController('Navigation').applyClass('RaceFinishWizard');
            }
        });


    },

    onEndRaceButtonTap: function(button, e, eOpts) {
        this.setStatus(button.getText());
        this.getBFinishBtn().disable();
    },

    onAbandonButtonTap: function(button, e, eOpts) {
        this.setStatus(button.getText());
        this.getBFinishBtn().disable();

    },

    onBoatStatusSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        var me = this,
            boat;
        if(me.getRaceBoatsReviewList().selected.length > 0 ){
            boat = me.getRaceBoatsReviewList().selected.getAt(0);

            boat.set('boatstatusid', newValue);
            this.getReviewApplyBtn().setDisabled(false);
        }
        else{

            this.getReviewApplyBtn().setDisabled(true);
        }
    },

    onBoatSearchfieldChange: function(textfield, e, eOpts) {
        this.filterBoats();
    },

    onMoveToTopButtonTap: function(button, e, eOpts) {
        var list = this.getBoatsView(),
            selected = list.getSelection();

        if (selected.length > 0) {
            selected[0].set('xindex','-1');
        }

        this.getEntrantsFinishList().getStore().clearFilter(true);
    },

    onDelButtonTap: function(button, e, eOpts) {
        var raceList = this.getFinishRacesList(),
            selection = raceList.getSelection(),
            store = raceList.getStore(),
            idx;

        if (selection.length > 0) {
            store.remove(selection[0]);
        }

        if(this.getFinishRacesList().getStore().getCount() < 1){
            this.getNextFinishRacesBtn().disable();
        }
    },

    onBackReviewButtonTap: function(button, e, eOpts) {
        this.jumpCards(-1);
    },

    onAdjustButtonTap: function(button, e, eOpts) {
        var me = this;



        var me = this,
            popup = new Ext.Panel({
            //floating: true,
            //centered: true,
            modal: true,
            fullscreen: true,
            layout: 'vbox',
            itemId: 'popupPnl',
            items: [{
                xtype: 'timepickerfield',
                itemId: 'boatTime',
                name: 'defaultTime',
                label: 'Time',
                dateFormat: 'H:i',
                margin: '10',
                value: new Date(1,1,1,13,0),
                //useMeridiem: false,
                picker:{

                    slotOrder: ['hour','minute'],
                    endHour: 23
                }
            }]
        }).showBy(button);
    },

    onSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        this.getEntrantsFinishList().getStore().clearFilter(true);

        //INITIALIZE IT WITH UNIFORM VIEW
        var x = Ext.create('Ext.XTemplate',
         '<div class="item">',
         '    <div class="name">{[Ext.String.ellipsis(values.bname,20)]}',
         '    </div>',
             '    <div class="vicinity">{hullnumber}</div>' ,
         '</div>'
         );
        //full - full name
        if (newValue === 'full')
        {
            x = Ext.create('Ext.XTemplate',
                           '<div class="itemFull">',
                           '    <div style="display: table-row;" class="name">{bname}',
             '    </div>',
             '    <div style="display: table-row;" class="vicinity" >{hullnumber}</div>' ,
             '</div>'
            );

        }
        if (newValue === 'picture'){
             x = Ext.create('Ext.XTemplate',
              '<div class="itemPicture">',
              '    <div  style="display: table-row;"  class="name">{bname}',
              '    </div>',
              '    <div style="float: right;display: table-row; text-align: right !important;" class="vicinity">{hullnumber}</div>',
                         '<div class="icon" style={[this.getPath(values.path)]}></div>',

                           '</div>',
                           {
                               getPath: function(path) {
                                   return "margin-top: 14%;background-size:cover;background-image:url('../admin/uploaded_files/5417f6f2d174c6.44304491.png')";//+ path +"')";
                               }
                           }
         );
        }

        this.getBoatsView().setItemTpl(x);
        this.getBoatsView().refresh();
    },

    onDataviewSelect: function(dataview, record, eOpts) {
        if(this.getReviewApplyBtn().isDisabled()){
            this.getRFReview().down('#boatTime').setValue(new Date(record.get('endtime')));
            this.getRFReview().down('#datePicker').setValue(new Date(record.get('endtime')));
            this.getRFReview().down('#raceStatusCmb').setValue(record.get('boatstatusid'));
        }
        else {
        //debugger;
        }

    },

    onUndoButtonTap: function(button, e, eOpts) {
        var me = this,
            list = me.getBoatsFinishView(),
            selected = list.getSelection(),
            bStore = list.getStore(),
            finishList = me.getBoatsView(),
            store = finishList.getStore(),
            idx;

        if (selected.length > 0) {
            Ext.Msg.confirm("Confirm undo", "Are you sure you want to clear the finish time for this boat?", function(btn){
                if (btn == 'yes'){

                        rec = selected[0];
                        rec.set('endtime', null);
                        store.add(selected);
                        bStore.remove(selected);

                }
            });
        }
    },

    onBoatsItemTap: function(dataview, index, target, record, e, eOpts) {
        var me = this;

        me.getBFinishBtn().setText('Finish');
        me.getBoatsFinishView().deselectAll();
        me.getTempBoatsView().deselectAll();
    },

    onBoatsTempTap: function(dataview, index, target, record, e, eOpts) {
        var me = this;

        me.getBFinishBtn().setText('Finish');
        me.getBoatsFinishView().deselectAll();
        me.getBoatsView().deselectAll();
    },

    onBoatsFinishItemTap: function(dataview, index, target, record, e, eOpts) {
        var me = this;

        //me.getBFinishBtn().setText('Undo');
        me.getBoatsView().deselectAll();
        me.getTempBoatsView().deselectAll();
    },

    onReviewApplyButtonTap: function(button, e, eOpts) {
        var me = this,
            list = me.getRaceBoatsReviewList(),
            selected = list.getSelection(),
            time = me.getRFReview().down('#boatTime'),
            date = me.getRFReview().down('#datePicker'),
            status = me.getRFReview().down('#raceStatusCmb').getValue();
            datetime = new Date(date.getValue().getFullYear(), date.getValue().getMonth(),
                                date.getValue().getDate(), time.getValue().getHours(),
                                time.getValue().getMinutes(), time.getValue().getSeconds());


        if (selected.length > 0) {
            rec = selected[0];
            rec.set('endtime', Ext.Date.format(datetime, 'Y-m-d H:i:s'));
            rec.set('boatstatusid', status);
        }

        me.getReviewApplyBtn().setDisabled(true);
    },

    onUndoRaceButtonTap: function(button, e, eOpts) {
        this.setStatus(null);
        this.getBFinishBtn().enable();

    },

    onOutOfTimeButtonTap: function(button, e, eOpts) {
        this.setStatus(button.getText());
        this.getBFinishBtn().disable();

    },

    onBoatSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        this.filterBoats();
    },

    onRaceControlListChange: function(selectable, records, eOpts) {
        if (records.length>0){
            this.getAbbandonRaceBtn().setDisabled(false);
            this.getOutOfTimeBtn().setDisabled(false);
            this.getUndoRaceBtn().setDisabled(false);
        }
        else{

            this.getAbbandonRaceBtn().setDisabled(true);
            this.getOutOfTimeBtn().setDisabled(true);
            this.getUndoRaceBtn().setDisabled(true);

        }
    },

    onTabpanelActiveItemChange: function(container, value, oldValue, eOpts) {
         // race
        if (value.tabIndexChange === 1){
            this.getBTopBtn().setHidden(false);
            this.getSListChk().setHidden(false);
            this.getBFinishBtn().setHidden(false);
            this.getBoatSearch().setHidden(false);
        }
        else if (value.tabIndexChange === 2 ){

            this.getBTopBtn().setHidden(true);
            this.getSListChk().setHidden(true);
            this.getBFinishBtn().setHidden(true);
            this.getBoatSearch().setHidden(true);

        }
    },

    onChangeTime: function(target) {
        //try to check if time has changed
        var me = this;
        //debugger;
        if(me.getRaceBoatsReviewList().selected.length > 0 ){
            var rec = this.getRaceBoatsReviewList().selected,
                timeVal = target.getValue(),
                recTime = new Date(rec.items[0].get('endtime'));
            //debugger;
            if (timeVal.getTime() != recTime.getTime()){
                me.getReviewApplyBtn().setDisabled(false);
            }
            else{
                me.getReviewApplyBtn().setDisabled(true);
            }
        }
        else{

            me.getReviewApplyBtn().setDisabled(true);
        }
    },

    onReviewDivisionCmb: function(selectfield, newValue, oldValue, eOpts) {
        var me = this,
            filters = [],
            division = newValue;

        me.getRaceBoatsReviewList().getStore().clearFilter(true);


        if(division){
            filters.push({property: 'divisionid', value: division});
        }

        me.getRaceBoatsReviewList().getStore().filter(filters);
    },

    onAddTempButtonTap: function(button, e, eOpts) {
        var list = this.getBoatsView(),
            selected = list.getSelection(),
            bStore = list.getStore(),
            finishList = this.getTempBoatsView(),
            store = finishList.getStore(),
            idx;

        if (selected.length > 0) {
            rec = selected[0];
            //rec.set('endtime', Ext.Date.format(new Date(), 'Y-m-d H:i'));
            store.add(selected);
            bStore.remove(selected);
        }
    },

    onRemoveTempButtonTap: function(button, e, eOpts) {
        var me = this,

            list = me.getTempBoatsView(),
            selected = list.getSelection(),
            bStore = list.getStore(),
            removeList = me.getBoatsView(),
            store = removeList.getStore(),
            idx;

        if (selected.length > 0) {
            rec = selected[0];
            store.add(selected);
            bStore.remove(selected);
        }


    },

    onFinishAllButtonTap: function(button, e, eOpts) {
        var me = this,
            list = me.getTempBoatsView(),
            bStore = list.getStore(),
            removeList = me.getBoatsFinishView(),
            store = removeList.getStore(),
            idx, fDate = Ext.Date.format(new Date(), 'Y-m-d H:i:s');


        for(var i = 0; i < bStore.getCount(); i++){
            rec = bStore.getAt(i);
            rec.set('endtime', fDate);
            store.add(rec);

        }

        bStore.removeAll();
    },

    onKey1ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey2ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey3ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey4ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey5ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey6ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey7ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey8ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey9ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKey0ButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKeyBackButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onKeyClearButtonTap: function(button, e, eOpts) {
        this.onKeyboard(button);
    },

    onReviewDateChange: function(datepickerfield, newDate, oldDate, eOpts) {
        var me = this;

        //me.getReviewApplyBtn().setDisabled(false);
    },

    onDatepickerChange: function(datepicker, value, eOpts) {
        this.getReviewApplyBtn().setDisabled(false);
    },

    jumpCards: function(no, cardNo) {
        var me = this, vals,
            wizard = me.getRaceFinishWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem);

        no = no ? (selectedIndex + no) : cardNo;

        //wizard.setActiveItem(no);
        wizard.animateActiveItem(no,
                                 {type: 'slide', direction: selectedIndex > no? 'right' : 'left'});

    },

    onKeyboard: function(button) {
        var wizard = button.up('#keyboardCt').config.parentCtrl,
            ctrl = DynaMightMobile.app.getController(wizard),
            txt = button.getText(),
            s = ctrl.getBoatSearch(),
            v = s.getValue();


        if(txt === 'C'){
            s.setValue('');
        }
        else if(txt === '<' && txt !== ''){
            s.setValue(v.substring(0, v.length - 1));
        }
        else if(txt !== ''){
            s.setValue(v + txt);
        }
        //debugger;
        ctrl.filterBoats();
    },

    setStatus: function(status) {
        var me = this,
            race;
        if(me.getFRacesList().selected.length > 0 ){
            race = me.getFRacesList().selected.getAt(0);

            race.set('status', status);
            //debugger;
        }
    },

    filterBoats: function(withoutSelection) {
        var me = this,
            filters = [],
            division = me.getBoatDivisionCmb().getValue(),
            searchField = me.getBoatSearch(),
            storeB = me.getBoatsView().getStore();

        me.getBoatsView().getStore().clearFilter(true);

        filters =[
            {property: "raceid", value: me.raceid},
            {filterFn: BoatFilter, scope: searchField}
        ];

        if(division){
            filters.push({property: 'divisionid', value: division});
        }

        storeB.filter(filters);

        if(storeB.getCount() > 0 && !withoutSelection){
            var tmp = storeB.findExact('hullnumber', searchField.getValue());
            if(tmp > -1){
                me.getBoatsView().select(storeB.getAt(tmp));
            }
            else
                me.getBoatsView().select(storeB.getAt(0));
        }


    }

});