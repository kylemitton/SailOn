/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMightMobile.controller.Navigation', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.data.proxy.Sql'
    ],

    config: {
        refs: {
            mainCt: 'container#mycontainer',
            homePanel: 'panel#homePanel',
            menuList: 'list#MenuList',
            sideMenu: 'container#sideMenuContainer',
            navBtn: 'button#navBtn',
            topCardLbl: 'label#topCardLbl',
            logInFrm: 'formpanel#registrationLoginFrm1',
            menuView: 'dataview#menuView',
            syncLocalStorage: 'button#syncLocalStorage',
            loadLocalStorage: 'button#loadLocalStorage',
            matchPhoto: 'image#matchPhoto',
            mainCt: 'container#mainCtId'
        },

        control: {
            "button#navBtn": {
                tap: 'onNavigate'
            },
            "container#mainCtId": {
                initialize: 'onMainInitialize'
            },
            "button#addBtn": {
                tap: 'onAddButtonTap'
            },
            "button#saveBtn": {
                tap: 'onSave'
            },
            "button#cancelBtn": {
                tap: 'onCancel'
            },
            "list#listId": {
                itemtap: 'onEntityItemTap'
            },
            "searchfield#search": {
                change: 'onSearchfieldChange'
            },
            "container#mycontainer55": {
                initialize: 'onMenuContainerInitialize'
            },
            "button#mainLogInBtn": {
                tap: 'onLogInButtonTap'
            },
            "button#lLoginBtn": {
                tap: 'onLoginActionButtonTap'
            },
            "button#loadLocalStorage": {
                tap: 'onLoadLocalStorage'
            },
            "button#syncLocalStorage": {
                tap: 'syncLocalStorageToDB'
            },
            "button#takeBtn": {
                tap: 'onTakeButtonTap'
            },
            "button#uploadBtn": {
                tap: 'onUploadFileButtonTap'
            },
            "button#tcCancelBtn": {
                tap: 'onTCCancelTap'
            },
            "button#tcOKBtn": {
                tap: 'onTCOKTap'
            },
            "button#genericNextBtn": {
                tap: 'onGenericNextButtonTap'
            }
        }
    },

    onNavigate: function(button, e, eOpts) {
        var me = this;
        function applyMenu(){
            Ext.Viewport.setMasked(true);
            new Ext.util.DelayedTask(function(){
                me.applyClass('MenuView');
                me.getTopCardLbl().setHtml('Canberra Yacht Club');
            }).delay(250);
        }

        if(APP.WarningUnsavedData){
            Ext.Msg.confirm("Confirm unsaved data", "You have unsaved data. Do you want to leave this page and lose your changes?", function(btn){
                if (btn == 'yes'){
                   applyMenu();
                    APP.WarningUnsavedData = false;
                }

            });
        }
        else{
            applyMenu();
        }


    },

    onMainInitialize: function(component, eOpts) {
        var conf = {user: 'Sail', password: 'Sail'};
        this.onLogin(conf);
        return;
        if(localStorage.goOffline){
            this.getLoadLocalStorage().setHidden(true);
            this.getSyncLocalStorage().setHidden(false);
            this.getSyncLocalStorage().setStyle('color:red;');
        }
        else{

            this.getLoadLocalStorage().setHidden(false);
            this.getSyncLocalStorage().setHidden(true);
            this.getSyncLocalStorage().setStyle('color:white;');
        }
    },

    onAddButtonTap: function(button, e, eOpts) {
        if(APP.List)
            this.onAdd();
    },

    onSave: function(button, e, eOpts) {
        var me = this;
        //validate
        if (false) {
            Ext.Msg.show({
                title: 'Invalid form!',//T('errLogIn'),
                msg: 'Form is invalid. Fill in all required fields.',//T(''),
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR,
                modal: true
            });
            return;
        }
        //exec
        //debugger;
        var rec = APP.AddEdit.getValues();
        rec.EntityName = APP.CurrentItem.EntityName;
        rec.RefreshEntityViewID = APP.CurrentItem.EntityViewID;
        //rec.EntityFields = this.getAddEdit().entityConfig.Fields;
        var store = APP.List.getStore();


        store.execConfig({
            method: 'EditEntity',
            params: rec
        });


        APP.List.setHidden(false);
        APP.AddEdit.setHidden(true);
    },

    onCancel: function(button, e, eOpts) {

        APP.List.setHidden(false);
        APP.AddEdit.setHidden(true);
        //this.getHomePanel().removeAll();
        //this.getHomePanel().add(APP.List);
    },

    onEntityItemTap: function(dataview, index, target, record, e, eOpts) {
        //debugger;
        if(!dataview.config.childentityviewid) return;

        var me = this,
            menuItem,
            listItem;


        for (var i = 0; i < APP.Menu.length; i++) {
            listItem =  APP.Menu[i];
            if(listItem.EntityViewID == dataview.config.ChildEntityViewID){
                me.applyList(listItem, record);
                return;
            }
        }


    },

    onSearchfieldChange: function(textfield, newValue, oldValue, eOpts) {
        if(APP.List && APP.List.config.itemTpl.length > 0){

            var regExp = /\{(.*?)\}/;
            var matches = regExp.exec(APP.List.config.itemTpl[0]);

            var filter = ' WHERE ' + matches[1] + " like '%" + newValue + "%'";

            APP.List.getStore().execConfig({
                params: {
                    entityViewID: APP.List.config.entityviewid ,
                    filters: filter

                }
            });


            //debugger;
        }
    },

    onMenuContainerInitialize: function(component, eOpts) {
        var me = this,
            viewStore,
            menuView = component.down('#menuView');

        viewStore = CreateStore("sysentityview");
        viewStore.addData(APP.Permissions);
        menuView.setStore(viewStore);
    },

    onLogInButtonTap: function(button, e, eOpts) {
        this.applyClass('LogInFrm');

        this.getTopCardLbl().setHtml('Canberra Yacht Club');

    },

    onLoginActionButtonTap: function(button, e, eOpts) {
        var frm = this.getLogInFrm().getValues(),
            conf = {
                user: frm.username,
                password: frm.password
        };

        this.onLogin(conf);
    },

    onLoadLocalStorage: function(button, e, eOpts) {
        var me = this;
        me.loadItemsLocalStorage = 0;
        if(localStorage.goOffline)
        {
            Ext.Msg.alert('Ooops', 'Values already in local storage');
            return;
        }
        Ext.Msg.confirm("Go offline",
                        "Are you sure you want to go offline? Starting now server connection won't be available",
              function(btn){
            if (btn == 'yes'){
                Ext.Viewport.setMasked({
                    xtype: 'loadmask',
                    message: 'Going offline'
                });
                var boatStore = CreateStore("raceboat",'raceboatSQL'),

                    raceEntity = GetEntityByName("race"),
                    raceSeriesDevEntity = GetEntityByName('raceseriesdivision'),
                    raceStore = CreateStore("race",'raceSQL'),
                    boatDivisionsStore = CreateStore("raceboatdivision",'raceboatdivisionSQL'),
                    boatSeriesStore = CreateStore("raceseriesdivision",'raceseriesdivisionSQL');

                boatStore.parentScope = me;
                boatStore.execConfig({
                    params: {
                        entityViewID: GetEntityViewByName('BR').entityviewid ,
                        filters: 'WHERE cast(startdate as date) = curdate()'
                    },
                    callback:function(data,operation,d,f){
                        this.parentScope.setSQLStore(this,data);
                        this.parentScope.loadItemsLocalStorage++;
                        if(this.parentScope.loadItemsLocalStorage === 4){
                            Ext.Msg.alert('Offline', 'You are working offline now');
                            Ext.Viewport.setMasked(false);

                            me.getLoadLocalStorage().setHidden(true);
                            me.getSyncLocalStorage().setHidden(false);
                            me.getSyncLocalStorage().setStyle('color:red;');
                        }
                    }
                });

                boatSeriesStore.parentScope = me;
                boatSeriesStore.execConfig({
                    params: {
                        entityViewID: GetEntityView(raceSeriesDevEntity.entityid).entityviewid ,
                        filters: ''
                    },
                    callback:function(data,operation,d,f){
                        this.parentScope.setSQLStore(this,data);
                        this.parentScope.loadItemsLocalStorage++;
                        if(this.parentScope.loadItemsLocalStorage === 4){
                            Ext.Msg.alert('Offline', 'You are working offline now');
                            Ext.Viewport.setMasked(false);

                            me.getLoadLocalStorage().setHidden(true);
                            me.getSyncLocalStorage().setHidden(false);
                            me.getSyncLocalStorage().setStyle('color:red;');
                        }
                    }
                });


                raceStore.parentScope = me;
                raceStore.execConfig({
                    params: {
                        entityViewID: GetEntityView(raceEntity.entityid).entityviewid ,
                        filters: 'WHERE cast(startdate as date) = curdate()'
                    },
                    callback:function(data,operation,d,f){
                        this.parentScope.setSQLStore(this,data);
                        this.parentScope.loadItemsLocalStorage++;
                        if(this.parentScope.loadItemsLocalStorage === 4){
                            Ext.Msg.alert('Offline', 'You are working offline now');
                            Ext.Viewport.setMasked(false);

                            me.getLoadLocalStorage().setHidden(true);
                            me.getSyncLocalStorage().setHidden(false);
                            me.getSyncLocalStorage().setStyle('color:red;');
                        }
                    }
                });


                boatDivisionsStore.parentScope = me;
                boatDivisionsStore.execConfig({
                    params: {
                        entityViewID: GetEntityViewByName('SD').entityviewid ,
                        filters: ''
                    },
                    callback:function(data,operation,d,f){
                        this.parentScope.setSQLStore(this,data);
                        this.parentScope.loadItemsLocalStorage++;
                        if(this.parentScope.loadItemsLocalStorage === 4){
                            Ext.Msg.alert('Offline', 'You are working offline now');
                            Ext.Viewport.setMasked(false);

                            me.getLoadLocalStorage().setHidden(true);
                            me.getSyncLocalStorage().setHidden(false);
                            me.getSyncLocalStorage().setStyle('color:red;');
                        }
                    }
                });

                /*Also add menu,entityes, fields*/
                var menuFields = [
                    "childentityviewid",
                    "childpropertyname",
                    "entityid",
                    "entityname",
                    "entityviewid",
                    "expandertemplate",
                    "ignorecolumns",
                    "interfacetype",
                    "ismenu",
                    "mobiletemplate",
                    "name",
                    "parentpropertyname",
                    "permission",
                    "pickertemplate",
                    "sqltext"
                ];
                me.setSQLStoreStatic(APP.Menu,"menu", menuFields);

                var entitiFields = [
                    "description",
                    "entityid",
                    "entitytypeid",
                    "name"
                ];
                me.setSQLStoreStatic(APP.Entities,"entity", entitiFields);

                var configFields = [
                    "name",
                    "value"
                ];
                var configData = [];
                for(var propertyName in APP.Configurations) {

                    configData.push({name:propertyName, value:APP.Configurations[propertyName]});

                }
                me.setSQLStoreStatic(configData,"configurations", configFields);

                var fieldsFields = [

                    "config",
                    "defaultvalue",
                    "description",
                    "entityid",
                    "iseditable",
                    "isonlyview",
                    "name",
                    "priority",
                    "propertyid",
                    "xtype"
                ];
                me.setSQLStoreStatic(APP.Fields,"fields", fieldsFields);

                localStorage.goOffline = true;

            }
        });

    },

    syncLocalStorageToDB: function(button, e, eOpts) {
        var me = this;
        Ext.Msg.confirm("Go online",
                        "Are you sure you want to go online? All local data will be synced with server",
              function(btn){
            if (btn == 'yes'){
                //sync race start
                var raceStore = CreateStore('raceseriesdivision');
                Ext.Viewport.setMasked({
                    xtype: 'loadmask',
                    message: 'Going online'
                });
                raceStore.execConfig({
                    params: {},
                    callback:function(data,operation,d,f){
                        var filters =[{property: "sysrowstate", value: '3'}],
                            items = [];
                        this.filter(filters);
                        this.each(function(record)
                        {
                            items.push(record.data);
                        });
                        localStorage.goOffline = "";
                        AJAXCommand({
                            params: {
                                raceseriesdivision: items
                            },
                            method: 'SyncRaceStartLS',
                            callback: function(status, message, obj, scope) {
                                Ext.Viewport.setMasked(false);
                                if (status) {

                                    var db = openDatabase('Sencha', '1.0', 'Sencha Database', 5 * 1024 * 1024);
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE raceboatSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE raceSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE raceboatdivisionSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE raceseriesdivisionSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE menuSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE fieldsSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE configurationsSQL');
                                    });
                                    db.transaction(function (tx) {
                                        tx.executeSql('DROP TABLE entitySQL');
                                    });
                                    localStorage.goOffline = "";

                                    me.getLoadLocalStorage().setHidden(false);
                                    me.getSyncLocalStorage().setHidden(true);
                                    me.getSyncLocalStorage().setStyle('color:white;');
                                }
                                else
                                {

                                    localStorage.goOffline = "true";
                                    Ext.Msg.alert( 'Sync', 'Failed to sync Race Start');

                                }
                            }
                        });

                    }});// to set sql proxy to store

            }
        });
    },

    onTakeButtonTap: function(button, e, eOpts) {
        /*
        navigator.camera.getPicture(onPhotoDataSuccess, onFail, {
            quality: 50,
            targetWidth: 600,
            targetHeight: 600,
            correctOrientation: 1,
            saveToPhotoAlbum: 1
            });
        return;
        */
        Ext.device.Camera.capture({
            success: function(image) {
                //alert (image);
                //return;
                alert('1');
                me.getMatchPhoto().setSrc(image);
                return;
                Ext.getCmp('matchPhoto').setSrc('data:image/jpg;base64,' + image);
                var base64String = image.trim();
                base64String = base64String.replace(/(\n)/gm,'');
                this.imageData = base64String;
            },
            failure: function(message){
                Ext.Msg.alert('', 'Failed because: ' + message, Ext.emptyFn);
            },
            quality: 100,
            source: 'camera',
            scope: this,
            destination: 'data',
            encoding: 'jpg',
            width: 300,
            height: 300

        });//, this, 'file', 'png', 400, 400);
    },

    onUploadFileButtonTap: function(button, e, eOpts) {
        var me = this;
        Ext.Ajax.request({
                url : AJAX_URL + 'HTTPFileUpload.php',
                method : 'POST',
                params : {info:me.imageData},
                success : function (response) {

                },
                failure: function(response) {

                    Ext.Msg.alert('', 'Server-side failure with status code ' + response.status, Ext.emptyFn);
                }
            });
    },

    onTCCancelTap: function(button, e, eOpts) {
        //this.onNavigate();
    },

    onTCOKTap: function(button, e, eOpts) {
        //this.applyClass('SignOnWizard');
        //this.getTopCardLbl().setHtml('Canberra Yacht Club - Sign On Wizard');

    },

    onGenericNextButtonTap: function(button, e, eOpts) {
        var me = this,
            panel;

        function nextC(){
            Ext.Viewport.setMasked(true);

            new Ext.util.DelayedTask(function(){

                me.getHomePanel().removeAll(true,true);
                panel = Ext.create('DynaMightMobile.view.' + button.config.xurl);
                me.getHomePanel().add(panel);

                Ext.Viewport.setMasked(false);
            }).delay(250);
        }
        if(button.config.xurl == 'RFRace'){
            Ext.Msg.confirm("Confirm finish", "Are you sure you want to finish the race?", function(btn){
                if (btn == 'yes'){
                    nextC();
                }
            });

        }
        else{
            nextC();
        }
    },

    createModel: function(item) {
        //init fields
        var fields = [];//item.entityConfig.Fields.split(",");
        for (var i = 0; i < APP.Fields.length; i++) {
            var rec = APP.Fields[i];

            if(rec.entityid == item.entityid ){
                fields.push(rec.name);
            }
        }
        //debugger;

        //create model
        if(!Ext.ModelManager.isRegistered(item.entityname)){
            Ext.define(item.entityname,
                       {
                           extend: 'Ext.data.Model',
                           fields: fields
                       });


        }
    },

    onAdd: function() {
        var items = [{
                xtype: 'toolbar',
                docked: 'top',
                items: [{
                    xtype: 'button',
                    id: 'cancelBtn',
                    ui: 'back',
                    iconMask: false,
                    text: 'Cancel'
                },{
                    xtype: 'spacer'
                },{
                    xtype: 'button',
                    id: 'saveBtn',
                    ui: 'save',
                    iconMask: false,
                    text: 'Save'
                }]
            }],
            entityFields = '';
        //debugger;

        //CREATE COMBOS
        for (var i = 0; i < APP.Properties.length; i++) {
            var rec = APP.Properties[i],
                entityView;

            if(rec.ChildEntityID == APP.CurrentItem.EntityID)
            {
                entityFields += (entityFields ? ',' : '') + rec.ChildName;

                entityView = GetEntityView(rec.ParentEntityID);

                //debugger;
                CreateModel(rec.EntityName, rec.ParentEntityID);

                var store = new Ext.data.Store({model: rec.EntityName});
                store.execConfig({
                    params: {entityViewID: entityView.EntityViewID, filters: ""}
                });
                //debugger;
                items.push({
                    xtype: 'selectfield',
                    name : rec.ChildName,
                    label: rec.Description || rec.ChildName,



                    itemId: 'cmb' + rec.ChildName,
                    fieldLabel: rec.Description || rec.ChildName,

                    displayField: GetDisplayField(store._model.prototype.fields.items),//store.displayField,//store.model.prototype.fields.items[1].name,
                    store: store,
                    valueField: rec.ParentName,
                    displayTplTmp1: Ext.create('Ext.XTemplate',
                        '<tpl for=".">',
                            (entityView.PickerTemplate || GetDisplayField(store._model.prototype.fields.items)),
                        '</tpl>'
                    )
                });
            }

        }



        //CREATE ITEMS + LIST OF FIELDS
        for (var i = 0; i < APP.Fields.length; i++) {
            var rec = APP.Fields[i];

            if(rec.entityid != APP.CurrentItem.entityid || rec.iseditable == '0') continue;
            entityFields += (entityFields ? ',' : '') + rec.name;
            var obj = {
                xtype:rec.xtype == 'hidden' ? 'hiddenfield' : rec.xtype,
                itemId: rec.propertyid,
                name: rec.name,
                label: rec.name//,
                //labelAlign: 'top'
            };
            items.push(obj);
        }

        items.push({
            xtype:'hiddenfield',
            itemId: 'entityFieldsId',
            name: 'EntityFields',
            value: entityFields
        });

        //CREATE FORM PANEL
        var panel = Ext.create('Ext.form.Panel',{
            height: '100%',
            //config: {
            items: [{
                xtype: 'fieldset',
                id: 'fieldSet',
                title: APP.CurrentItem.Name,
                instructions: 'Please enter the information above.',
                defaults: {
                    labelWidth: '35%'
                },
                items: items
            }]
            //}

        });
        APP.List.setHidden(true);
        APP.AddEdit = panel;
        //this.getHomePanel().removeAll();
        this.getHomePanel().add(panel);
    },

    applyList: function(item, record) {
        //create model
        //init fields
        var me = this,
            fields = [],
            store, panel;

        fields = CreateModel(item.entityname, item.entityid);

        //create grid
        store = new Ext.data.Store({model: item.entityname});
        //store.getModel().save();

        store.execConfig({
            params: {
                entityViewID: item.entityviewid ,
                filters: (record ? ' WHERE ' + item.childpropertyname + ' = ' + record.get(item.parentpropertyname) : '')

            }
        });


        me.getHomePanel().removeAll(true, false);
        //debugger;
        panel = Ext.create('Ext.dataview.List',{
            itemId: 'listId',//+ item.EntityName,
            //entityConfig: item,
            store: store,
            //columns: columns,
            itemTpl: [ item.mobiletemplate],
            plugins: [
                {
                    xclass: 'Ext.plugin.PullRefresh',
                    pullText: 'Pull down for Refresh!'
                }
            ],
            ChildEntityViewID: item.childentityviewid,
            EntityViewID: item.entityviewid

        });

        me.getHomePanel().add(panel);

        APP.List = panel;
        APP.CurrentItem = item;

    },

    applyClass: function(className) {
        var me = this,
            panel;

        //Ext.Viewport.removeAll(true,false);
        me.getHomePanel().removeAll(true,true);
        /*
        if (className == 'SeriesWizard')
            panel = APPSW;
        else if (className == 'RaceStartWizard')
            panel = APPRS;
        else if (className == 'RaceFinishWizard')
            panel = APPRF;
        else if (className == 'SignOnWizard')
            panel = APPSO;
        else
            */
            panel = Ext.create('DynaMightMobile.view.' + className);
        //alert('x');
        //Ext.Viewport.add(panel);
        me.getHomePanel().add(panel);


    },

    onSignIn: function() {
        var me = this,
            view = APP.Configurations.MobileDefaultView;
        //debugger;
        Ext.Viewport.setMasked({
                    xtype: 'loadmask',
                    message: 'Loading...'
                });


        if(view){
            this.applyClass(view.replace(' ', ''));
        }

        me.getTopCardLbl().setHtml('Canberra Yacht Club - ' + view);

        Ext.Viewport.setMasked(false);
        APP.loggedIn = true;
    },

    onBackKeyDown: function(eve) {
        eve.preventDefault();
        if (APP.loggedIn ){

            Ext.Msg.confirm("Confirm exit", "Are you sure you want to exit?", function(btn){
                if (btn == 'yes'){
                    window.location = 'index.html';
                    navigator.app.exitApp();
                    return;
                }
            });

        }else
        {
            navigator.app.exitApp();
        }
    },

    onLogin: function(conf) {
        APP = {};
        var me = this,
            i, rec, permissions = [];



        AJAXCommand({

            params: conf,
            method: 'Login',
            scope: me,
            callback: function(status, message, obj, scope) {
                if (status) {
                    if(!obj.menu){
                        Ext.Msg.show({
                            title: 'Log In',//T('errLogIn'),
                            message: 'Username or password is incorect!',//T(''),
                            buttons: Ext.Msg.OK,
                            icon: Ext.Msg.ERROR,
                            modal: true
                        });
                        return;
                    }

                    //DynaMightMobile.app.getController('Navigation').loadMenu(obj.menu);
                    APP.Fields = obj.fields;
                    APP.Menu = obj.menu;
                    APP.Properties = obj.properties;
                    APP.Configurations = {};
                    APP.Entities = obj.entities;
                    APP.Permissions = [];

                    //debugger;
                    //models
                    for (i = 0; i < obj.menu.length; i++) {
                        rec = obj.menu[i];
                        if(rec.permission > 0 && (rec.interfacetype == 'Tablet'  || rec.interfacetype == 'Mobile' || rec.interfacetype == 'All')){
                            rec.displayname = rec.name.toUpperCase();
                            permissions.push(rec);
                        }
                    }

                    APP.Permissions = permissions;

                    //config
                    for (i = 0; i < obj.configurations.length; i++) {
                        rec =  obj.configurations[i];
                        APP.Configurations[rec.name] = rec.value;
                        //me.createModel(rec);
                    }
                    //menu View
                    //Ext.Viewport.add(Ext.create('DynaMightMobile.view.MenuView'));
                    /*
                    new Ext.util.DelayedTask(function(){
                        APPSW = new DynaMightMobile.view.SeriesWizard();
                        APPRS = new DynaMightMobile.view.RaceStartWizard();
                        APPRF = new DynaMightMobile.view.RaceFinishWizard();
                        APPSO = new DynaMightMobile.view.SignOnWizard();
                    }).delay(0);
                    */

                    me.onSignIn();
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Sign in',//T('errLogIn'),
                        msg: 'Error.',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });
    },

    setSQLStore: function(store, data, model) {
         var model = store.getModel();
        //create fields
        var fields =[];
        if(data.length === 0)
        {
            for(var i = 0; i< model.getFields().length; i++){
                fields.push(model.getFields().items[i].getName());
            }
        }
        else
        {
            for(var propertyName in data[0].data) {
                if( data[0].data[propertyName] !== undefined)
                {
                    fields.push(propertyName);
                }
                else{
                    for(var i=0; i<data.length;i++){
                        data[i].data[propertyName] = '';
                    }
                    fields.push(propertyName);
                }
            }
        }
        fields.push("sysrowstate");
        Ext.define(model.getName()+"SQL", {
            extend: "Ext.data.Model",
            phantom:true,
            config: {
                phantom:true,
                idProperty:'id',
                fields:fields
            }
        });
        var sqlStore = Ext.create("Ext.data.Store", {
            model: model.getName()+"SQL",
            //storeId: "Users",
            proxy: {
                type: "sql"
            }
        });

        for(var i=0; i<data.length;i++){
            data[i].data.sysrowstate = '0';
            sqlStore.add(data[i].data);
        }
        sqlStore.sync();
    },

    setSQLStoreStatic: function(data, modelName, modelFields, load) {
        //debugger;
        modelFields.push("sysrowstate");

        Ext.define(modelName+"SQL", {
            extend: "Ext.data.Model",
            phantom:true,
            config: {
                phantom:true,
                idProperty:'id',
                fields:modelFields
            }
        });
        var sqlStore = Ext.create("Ext.data.Store", {
            model: modelName+"SQL",
            pageSize:1000,
            config:{
                pageSize:1000
            },
            proxy: {
                type: "sql"
            }
        });
        if(load)
        {
            this.loadedItems = 0;
            sqlStore.load({callback: function(data,s,df){
                var modelName = s.getModel().getName();
                if (modelName === 'menuSQL'){
                    APP.Menu = [];
                    for(var i=0; i<data.length; i++){
                        APP.Menu.push(data[i].data);
                    }

                    var rec;
                    APP.Permissions = [];
                    for (i = 0; i < APP.Menu.length; i++) {
                        rec = APP.Menu[i];
                        if(rec.permission > 0 && (rec.interfacetype == 'Tablet'  || rec.interfacetype == 'Mobile' || rec.interfacetype == 'All')){
                            rec.displayname = rec.name.toUpperCase();
                            APP.Permissions.push(rec);
                        }
                    }
                    this.loadedItems++;
                    if(this.loadedItems === 4){
                        /*var viewStore = CreateStore("sysentityview");
                        viewStore.addData(APP.Permissions);
                        this.getMenuView().setStore(viewStore);*/
                        this.onSignIn();
                    }

                }
                else if(modelName === 'entitySQL'){
                    APP.Entities = [];

                    for(var i=0; i<data.length; i++){
                        APP.Entities.push(data[i].data);
                    }
                    this.loadedItems++;
                    if(this.loadedItems === 4){
                        /*var viewStore = CreateStore("sysentityview");
                        viewStore.addData(APP.Permissions);
                        this.getMenuView().menuView.setStore(viewStore);*/
                        this.onSignIn();
                    }
                }
                else if(modelName === 'fieldsSQL'){
                    APP.Fields = [];
                    for(var i=0; i<data.length; i++){
                        APP.Fields.push(data[i].data);
                    }
                    this.loadedItems++;
                    if(this.loadedItems === 4){
                        /*var viewStore = CreateStore("sysentityview");
                        viewStore.addData(APP.Permissions);
                        this.getMenuView().menuView.setStore(viewStore);*/
                        this.onSignIn();
                    }
                }
                /*else if(modelName === 'permissionsSQL'){
                    APP.Permissions = [];
                    for(var i=0; i<data.length; i++){
                        APP.Permissions.push(data[i].data);
                    }


                }*/
                else if(modelName === 'configurationsSQL'){
                    APP.Configurations = [];
                    for (i = 0; i < data.length; i++) {
                        var rec =  data[i];
                        APP.Configurations[rec.data.name] = rec.data.value;

                    }
                    this.loadedItems++;
                    if(this.loadedItems === 4){
                       /* var viewStore = CreateStore("sysentityview");
                        viewStore.addData(APP.Permissions);
                        this.getMenuView().menuView.setStore(viewStore);*/
                        this.onSignIn();
                    }
                }
            },scope:this});
            return sqlStore;
        }
        for(var i=0; i<data.length;i++){
            data[i].sysrowstate = '0';
            sqlStore.add(data[i]);
        }
        sqlStore.sync();
    }

});