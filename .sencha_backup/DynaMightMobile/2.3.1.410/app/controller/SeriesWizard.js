/*
 * File: app/controller/SeriesWizard.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMightMobile.controller.SeriesWizard', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            seriesWizard: 'panel#seriesWizardId',
            racesList: 'list#racesList',
            newTxt: 'numberfield#newTxt',
            raceDivisionsList: 'list#raceDivisionsList',
            divisionsList: 'list#divisionsList',
            seriesDetailsFrm: 'formpanel#seriesDetailsFrm',
            seriesName: 'textfield#SeriesName',
            divisionDetails: 'formpanel#divisionDetails',
            raceDetails: 'formpanel#raceDetails',
            racesReviewList: 'list#racesReviewList',
            seriesReview: 'label#seriesReview',
            yachtClubCmb: 'selectfield#yachtClubCmb',
            homePanel: 'panel#homePanel',
            patternFrm: 'formpanel#patternFrm',
            startdateId: 'textfield#startdateId',
            raceCtId: 'container#raceCtId',
            bottomCtId: 'container#bottomCtId',
            startFrm: 'formpanel#startFrm',
            seriesOptionsFrm: 'formpanel#seriesOptionsFrm',
            divisionDetailsEdit: 'formpanel#divisionDetailsEdit',
            raceDetailsEdit: 'formpanel#raceDetailsEdit',
            updateRaceBtn: 'button#updateRaceBtn',
            cancelRaceEditBtn: 'button#cancelRaceEditBtn'
        },

        control: {
            "button#backBtn": {
                tap: 'onBackButtonTap'
            },
            "button#nextBtn": {
                tap: 'onNextButtonTap'
            },
            "button#newBtn": {
                tap: 'onNewRaceButtonTap'
            },
            "button#addDivisionBtn": {
                tap: 'onAddDivisionButtonTap'
            },
            "button#allDivisionsBtn": {
                tap: 'onAllDivisionsButtonTap'
            },
            "button#delDivisionBtn": {
                tap: 'onDelDivisionButtonTap'
            },
            "button#newDivisionBtn": {
                tap: 'onNewDivisionButtonTap'
            },
            "button#delBtn": {
                tap: 'onDelRaceButtonTap'
            },
            "button#finishBtn": {
                tap: 'onFinishButtonTap'
            },
            "list#raceDivisionsList": {
                itemtap: 'onDivisionListItemTap'
            },
            "list#racesList": {
                itemtap: 'onRaceListItemTap'
            },
            "button#updateRaceBtn": {
                tap: 'onUpdateRaceButtonTap'
            },
            "button#addPatternBtn": {
                tap: 'onAddPatternButtonTap'
            },
            "button#updateDivisionBtn": {
                tap: 'onUpdateDivisionButtonTap'
            },
            "checkboxfield#signOnChk": {
                check: 'onCheckboxfieldCheck',
                uncheck: 'onCheckboxfieldUncheck'
            },
            "checkboxfield#signOffChk": {
                check: 'onCheckboxfieldCheck1',
                uncheck: 'onCheckboxfieldUncheck1'
            },
            "selectfield#handicapTypeTxt": {
                change: 'onSelectfieldChange'
            },
            "selectfield#seriesSelect": {
                change: 'onSeriesSelectfieldChange'
            },
            "button#saveDivisionBtn": {
                tap: 'onSaveDivisionBtnTap'
            },
            "button#cancelDivisionBtn": {
                tap: 'onCancelEditDevisionTap'
            },
            "button#addNewDivisionBtn": {
                tap: 'onAddNewDevision'
            },
            "button#cancelRaceEditBtn": {
                tap: 'onCancelEditRaceBtn'
            },
            "button#saveRaceBtn": {
                tap: 'onSaveRaceDetailsBtn'
            },
            "button#addNewRace": {
                tap: 'onAddNewRaceBtn'
            },
            "button#addRaceInListBtn": {
                tap: 'onAddRaceInList'
            },
            "button#cancelAllRaceInListBtn": {
                tap: 'onCancelInsertRaceBtn'
            }
        }
    },

    onBackButtonTap: function(button, e, eOpts) {
        var me = this,
            wizard = me.getSeriesWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            idx = 1;

        //me.getSeriesWizard().setActiveItem(selectedIndex - 1);

        if(selectedIndex === 0 || selectedIndex === 4 || selectedIndex === 6){
            idx = 2;
        }
        else if(selectedIndex === 7){
            idx = 3;
        }

        me.getSeriesWizard().animateActiveItem(selectedIndex - idx, {type: 'slide', direction: 'right'});



    },

    onNextButtonTap: function(button, e, eOpts) {
        var me = this, vals,
            wizard = me.getSeriesWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            idx = 1;


        if(selectedIndex === 0){
            if(!me.getSeriesName().getValue()){
                Ext.Msg.alert('Required field', 'Must fill name field!', Ext.emptyFn);
                return;
            }
        }
        else if(selectedIndex === 2 ){
            idx = 2;
        }
        else if(selectedIndex === 4 ){
            idx = 3;
        }
        else if(selectedIndex === 3){
            vals = me.getSeriesDetailsFrm().getValues();
            me.getSeriesReview().setHtml(
                //'Yacht club: ' + me.getYachtClubCmb().record.get('name') +
                ', Name: ' + vals.name +
                ', Location: ' + vals.location +
                ', Key contact: ' + vals.keycontact
            );
            //debugger;

        }

        me.getSeriesWizard().setActiveItem(selectedIndex + idx);


    },

    onNewRaceButtonTap: function(button, e, eOpts) {
        var me = this,
            store = me.getRacesList().getStore(),
            number = me.getNewTxt().getValue(),
            name = me.getSeriesDetailsFrm().getValues().name,
            records,
            dStart = me.getStartFrm().down('#defaultStartDt').getValue(),
            dTime = me.getStartFrm().down('#defaultTimeTxt').getValue(),
            y = dStart.getFullYear(), M = dStart.getMonth(), d = dStart.getDate(),
            h = dTime.getHours(),
            m = dTime.getMinutes(),
            newDate = new Date(y, M, d, h, m, 0, 0);

        //debugger;
        //newDate.setHours(h,m,0);

        function formattedDate(date) {
            var d = new Date(date || Date.now()),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [month, day, year].join('/');
        }

        //debugger;
        if(number){

             for (var i = 0; i < number; i++) {
                 newDate.setDate(newDate.getDate());
                 records =
                     [{
                         name: name + ' - Race ' + (i + 1),
                         startdate: newDate//formattedDate(newDate)

                     }];
                 store.insert(store.data.length, records);
             }
        }

    },

    onAddDivisionButtonTap: function(button, e, eOpts) {
        var list = this.getDivisionsList(),
            selected = list.getSelection(),
            raceDivisionsList = this.getRaceDivisionsList(),
            store = raceDivisionsList.getStore(),
            idx;

        if (selected.length > 0) {
            store.add(selected);
        }
    },

    onAllDivisionsButtonTap: function(button, e, eOpts) {
        var list = this.getDivisionsList(),
            all = list.getStore().getRange(),
            raceDivisionsList = this.getRaceDivisionsList(),
            store = raceDivisionsList.getStore(),
            idx;

        if (all.length > 0) {
            store.add(all);
        }
    },

    onDelDivisionButtonTap: function(button, e, eOpts) {
        var list = this.getRaceDivisionsList(),
            selected = list.getSelection(),
            store = list.getStore(),
            idx;

        if (selected.length > 0) {
            store.remove(selected);
        }
    },

    onNewDivisionButtonTap: function(button, e, eOpts) {
        //debugger;
        var list = this.getDivisionsList(),
            //selected = list.getSelection(),
            raceDivisionsList = this.getRaceDivisionsList(),
            store = raceDivisionsList.getStore(),
            idx;

        AJAXCommand({
            params: {
                name: 'New Division'
            },
            method: 'SaveDivision',
            callback: function(status, message, obj, scope) {
                if (status) {
                    store.add({
                        divisionid : obj.result,
                        name: 'New Division'
                    });
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Error saving Division',//T('errLogIn'),
                        msg: 'Error.',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });





    },

    onDelRaceButtonTap: function(button, e, eOpts) {
        var list = this.getRacesList(),
            selected = list.getSelection(),
            store = list.getStore(),
            idx;

        if (selected.length > 0) {
            store.remove(selected);
        }
    },

    onFinishButtonTap: function(button, e, eOpts) {
        var series = this.getSeriesDetailsFrm().getValues(),
            details = this.getSeriesOptionsFrm().getValues(),
            divisions = this.getRaceDivisionsList().getStore().getAllRecords(),
            races = this.getRacesList().getStore().getAllRecords(),
            raceSeriesDivisions = this.getRaceDivisionsList().getStore().getAllRecords(),
            fields = '',
            raceSeries = GetEntityByName("raceseries"),
            division = GetEntityByName("division"),
            race = GetEntityByName("race"),
            raceSeriesDivision = GetEntityByName("raceseriesdivision"),
            seriesSponsor = GetEntityByName("raceseriessponsor"),
            fields = [];

        Ext.apply(series, details);
        //debugger;
        fields.push(GetFieldsByEntity(raceSeries.entityid));
        fields.push(GetFieldsByEntity(division.entityid));
        fields.push(GetFieldsByEntity(race.entityid));
        fields.push(GetFieldsByEntity(raceSeriesDivision.entityid));

        fields.push(GetFieldsByEntity(seriesSponsor.entityid));


        AJAXCommand({
            params: {
                series: series,
                divisions: divisions,
                races: races,
                raceSeriesDivisions: raceSeriesDivisions,
                fields: fields
            },
            method: 'SaveRaceSeries',
            callback: function(status, message, obj, scope) {
                if (status) {

                }
                else
                {
                    Ext.Msg.show({
                        title: 'Error saving Series',//T('errLogIn'),
                        msg: 'Error.',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });

        this.getHomePanel().removeAll();
    },

    onDivisionListItemTap: function(dataview, index, target, record, e, eOpts) {
        //debugger;
        this.getDivisionDetails().setRecord(record);
    },

    onRaceListItemTap: function(dataview, index, target, record, e, eOpts) {
        //debugger;
        var form = this.getRaceDetails();

        //this.getRaceDetails().setRecord(record);
        /*debugger
        this.getStartdateId().setValue(record.get('startdate'));
        form.down('#nameTxt').setValue(record.get('name'));
        form.down('#timeTxt').setValue(record.get('startdate'));
        */
        var frm = this.getRaceDetailsEdit();
        frm.setRecord(record);

        frm.down('#timeTxt').setValue(record.get('startdate'));
        //form.down('#sponsorNameTxt').setValue(record.get('sponsorname'));
        //form.down('#linkTxt').setValue(record.get('sponsorlink'));
        //form.down('#').setValue(record.get('startdate'));
    },

    onUpdateRaceButtonTap: function(button, e, eOpts) {

        var me = this, vals,
            wizard = me.getSeriesWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            idx = 1;


        var rec, id,
            list = this.getRacesList(),
            selected = this.getRacesList().selected,
            frmValues = this.getRaceDetailsEdit().getValues();

        if(selected.length == 0){
            return;
        }

        me.getSeriesWizard().setActiveItem(5);


    },

    onAddPatternButtonTap: function(button, e, eOpts) {
        var me = this,
            frm = me.getPatternFrm(),
            values = frm.getValues(),
            //startdate = me.getStartFrm().getValues().startdate,
            store = me.getRacesList().getStore(),
            max = 30,
            //startdate = new Date(startdate),
            enddate = new Date(values.enddate),
            iteration = 0, number = 1,
            name = me.getSeriesDetailsFrm().getValues().name,

            dStart = me.getStartFrm().down('#defaultStartDt').getValue(),
            dTime = me.getStartFrm().down('#defaultTimeTxt').getValue(),
            y = dStart.getFullYear(), M = dStart.getMonth(), d = dStart.getDate(),
            h = dTime.getHours(),
            m = dTime.getMinutes(),
            startdate = new Date(y, M, d, h, m, 0, 0);

        //debugger;

        //if (!(values.1 || values.2 || values.3 || values.4 || values.5 || values.6 || values.7 )){
        //    return;
        //}

        function insert(date){
            var records =
                [{
                    name: name + ' - Race ' + number +  ' - ' + date.toDateString(),
                    startdate: new Date(date.getTime())

                }];
            store.insert(store.data.length, records);
            number++;
        }

        function iterateWeek(date){
            for (var j = date.getDay(); j < 8; j++) {

                if(values[j]){
                    if(
                        (values.endRadio == 'endAfterRadio' && iteration < values.occurences) ||
                        (values.endRadio == 'endByRadio' && startdate < enddate)
                    ){
                        insert(date);
                    }
                    iteration++;
                }
                date.setDate(date.getDate() + 1);
            }
        }


        for (var i = 0; i < max; i++) {
            iterateWeek(startdate);
            startdate.setDate(startdate.getDate() + 7 * (values.weeks - 1));
        }

    },

    onUpdateDivisionButtonTap: function(button, e, eOpts) {

        var me = this, vals,
            wizard = me.getSeriesWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            idx = 1;


        var rec, id,
            list = this.getRaceDivisionsList(),
            selected = this.getRaceDivisionsList().selected,
            frmValues = this.getDivisionDetailsEdit().getValues();

        if(selected.length == 0){
            return;
        }

        me.getSeriesWizard().setActiveItem(3);
        var frm = this.getDivisionDetails(),
            rec = frm.getRecord();
        this.getDivisionDetailsEdit().setRecord(rec);


    },

    onCheckboxfieldCheck: function(checkboxfield, e, eOpts) {
        var me =  this;
        me.getSeriesOptionsFrm().down('#mobileSignOnChk').setHidden(false);
        me.getSeriesOptionsFrm().down('#signOnMessageTxt').setHidden(false);
    },

    onCheckboxfieldUncheck: function(checkboxfield, e, eOpts) {
        var me =  this;
        me.getSeriesOptionsFrm().down('#mobileSignOnChk').setHidden(true);
        me.getSeriesOptionsFrm().down('#signOnMessageTxt').setHidden(true);
    },

    onCheckboxfieldCheck1: function(checkboxfield, e, eOpts) {
        var me =  this;
        me.getSeriesOptionsFrm().down('#mobileSignOffChk').setHidden(false);
        me.getSeriesOptionsFrm().down('#signOffMessageTxt').setHidden(false);
    },

    onCheckboxfieldUncheck1: function(checkboxfield, e, eOpts) {
        var me =  this;
        me.getSeriesOptionsFrm().down('#mobileSignOffChk').setHidden(true);
        me.getSeriesOptionsFrm().down('#signOffMessageTxt').setHidden(true);
    },

    onSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        if(newValue == 'CBH'){
           this.getDivisionDetails().down('#handicapValueTxt').setHidden(false);
        }
        else{
           this.getDivisionDetails().down('#handicapValueTxt').setHidden(true);
        }
    },

    onSeriesSelectfieldChange: function(selectfield, newValue, oldValue, eOpts) {
        if(selectfield && selectfield.record)
            this.getSeriesOptionsFrm().setValues(selectfield.record.data);
    },

    onSaveDivisionBtnTap: function(button, e, eOpts) {
        this.updateDevision();
        var me = this;

        me.getSeriesWizard().animateActiveItem(2, {type: 'slide', direction: 'right'});
    },

    onCancelEditDevisionTap: function(button, e, eOpts) {

        var me = this;

        me.getSeriesWizard().animateActiveItem(2, {type: 'slide', direction: 'right'});



    },

    onAddNewDevision: function(button, e, eOpts) {
        var me = this, vals,
            wizard = me.getSeriesWizard(),
            selectedIndex = wizard.items.indexOf(wizard._activeItem),
            idx = 1;

        me.getSeriesWizard().setActiveItem(3);
    },

    onCancelEditRaceBtn: function(button, e, eOpts) {

        var me = this;

        me.getSeriesWizard().animateActiveItem(4, {type: 'slide', direction: 'right'});



    },

    onSaveRaceDetailsBtn: function(button, e, eOpts) {
        this.updateRace();
        var me = this;

        me.getSeriesWizard().animateActiveItem(4, {type: 'slide', direction: 'right'});
    },

    onAddNewRaceBtn: function(button, e, eOpts) {
        var me = this;
        me.getSeriesWizard().setActiveItem(6);
    },

    onAddRaceInList: function(button, e, eOpts) {
        var me = this;
        me.onNewRaceButtonTap();

        me.getSeriesWizard().setActiveItem(4);
    },

    onCancelInsertRaceBtn: function(button, e, eOpts) {
        var me = this;

        me.getSeriesWizard().setActiveItem(4);
    },

    updateDevision: function() {

        var rec, id,
            list = this.getRaceDivisionsList(),
            selected = this.getRaceDivisionsList().selected,
            frmValues = this.getDivisionDetailsEdit().getValues();

        if(selected.length == 0){
           return;
            var view = GetEntityByName("division");
            rec = CreateModel('devisionA',view.entityid);
            //list.add(rec);
            var isAdded = true;
        }
        else{

            rec = selected.get(0);
        }

        //debugger;
        id = rec.get('divisionid');
        //rec.setData(frmValues);
        rec.set('name', frmValues.name);
        rec.set('group', frmValues.group);
        rec.set('handicaptype', frmValues.handicaptype);
        rec.set('handicapvalue', frmValues.handicapvalue);
        rec.set('description', frmValues.description);

        list.refresh();


        AJAXCommand({
            params: {
                divisionid: id,
                name: rec.get('name'),
                group: rec.get('group'),
                handicaptype: rec.get('handicaptype'),
                handicapvalue: rec.get('handicapvalue'),
                description: frmValues.description
            },

            method: 'SaveDivision',
            callback: function(status, message, obj, scope) {
                if (status) {
                    //debugger
                }
                else
                {
                    Ext.Msg.show({
                        title: 'Error saving Division',//T('errLogIn'),
                        msg: 'Error.',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });
    },

    updateRace: function() {
        var list = this.getRacesList(),
            selected = list.getSelection(),
            vals = this.getRaceDetailsEdit().getValues(),
            idx, rec,
            sto = list.getStore();

        //debugger;

        if (selected.length > 0) {

            var dStart = vals.picker,
            dTime = vals.time,
            y = dStart.getFullYear(), M = dStart.getMonth(), d = dStart.getDate(),
            h = dTime.getHours(),
            m = dTime.getMinutes(),
            newDate = new Date(y, M, d, h, m, 0, 0);


            rec = selected[0];
            rec.set('name',vals.name);
            rec.set('startdate',newDate);

        }

        list.refresh();
        this.getRacesReviewList().refresh();


    }

});