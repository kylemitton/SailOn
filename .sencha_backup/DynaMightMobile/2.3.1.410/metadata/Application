{
    "type": "Ext.app.Application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "controllers": [
            "Navigation",
            "SeriesWizard",
            "RegistrationWizard",
            "RaceStartWizard",
            "RacePortalWizard",
            "RaceFinishWizard",
            "HandicapWizard",
            "RaceResults",
            "BoatCrew",
            "RaceMessage",
            "RaceDuty",
            "SkipperInformation",
            "SkipperBoatList",
            "RaceEditor",
            "RaceSignOffWizard"
        ],
        "models": [
            "MyModel"
        ],
        "name": "DynaMightMobile",
        "requires": [
            "Ext.form.*",
            "Ext.field.*",
            "Ext.Button",
            "Ext.Toolbar",
            "Ext.MessageBox"
        ],
        "views": [
            "SeriesWizard",
            "MainCt",
            "GenericList",
            "RegistrationWizard",
            "RaceStartWizard",
            "Calendar",
            "StartLineCt",
            "RacePortal",
            "RaceFinishWizard",
            "SignOnWizard",
            "BoatDetails",
            "HandicapWizard",
            "SideMenu",
            "RaceResults",
            "SignOffWizard",
            "MenuView",
            "LogInFrm",
            "BoatCrew",
            "RaceMessages",
            "RaceDuty",
            "SkipperInformation",
            "SkipperBoatList",
            "BoatDetails1",
            "SWD",
            "RFBoats",
            "RFRace",
            "RFReview",
            "ResultsEditor"
        ]
    },
    "name": "Application",
    "designerId": "application",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "\r",
                    "AJAX_URL = 'http://192.168.1.137/bystorm/dm/mobile/';\r",
                    "AJAX_URL = 'http://192.168.8.109/bystorm/dm/mobile/';\r",
                    "AJAX_URL = 'http://192.168.1.11/bystorm/dm/mobile/';\r",
                    "//AJAX_URL = 'http://192.168.1.78/bystorm/dm/mobile/';\r",
                    "//AJAX_URL = 'http://bystorm.com.au/DM/mobile/';\r",
                    "//AJAX_URL = 'http://localhost/bystorm/dm/mobile/';\r",
                    "//AJAX_URL = 'http://localhost/dm/mobile/';\r",
                    "//AJAX_URL = 'http://dbstimeman.com/DM/mobile/';\r",
                    "AJAX_HANDLER = 'AJAXHandler.php';\r",
                    "\r",
                    "/*\r",
                    "var conf = {user: 'sail', password: 'sail'};\r",
                    "this.getController('Navigation').onLogin(conf);\r",
                    "Ext.Viewport.innerElement.addCls('viewport-inner');\r",
                    "*/\r",
                    "\r",
                    "\r",
                    "Ext.Viewport.add(Ext.create('DynaMightMobile.view.MainCt'));\r",
                    "Ext.Viewport.setMasked({ xtype: 'loadmask',message: 'Loading'});\r",
                    "\r",
                    "if (Ext.os.is('Android')) {\r",
                    "    document.addEventListener(\"backbutton\",\r",
                    "        Ext.bind(this.getApplication().getController('Navigation').onBackKeyDown,\r",
                    "    this), false);\r",
                    "}\r",
                    "\r",
                    "/*\r",
                    "Ext.override(Ext.plugin.PullRefresh, {\r",
                    "    onLatestFetched: function() {\r",
                    "        var store = this.getList().getStore();\r",
                    "        store.removeAll();\r",
                    "        store.load();\r",
                    "        //return;\r",
                    "        this.setState(\"loaded\");\r",
                    "        //this.fireEvent('latestfetched', this, toInsert);\r",
                    "        if (this.getAutoSnapBack()) {\r",
                    "            this.snapBack();\r",
                    "        }\r",
                    "    }\r",
                    "});\r",
                    "*/\r",
                    "/*Ext.override(Ext.scroll.indicator.Abstract, {\r",
                    "    getAutoHide: function(){\r",
                    "        //debugger;\r",
                    "        return false;\r",
                    "    }\r",
                    "});*/\r",
                    "Ext.override(Ext.grid.Grid, {\r",
                    "    onColumnSort: function(container, column, direction) {\r",
                    "        //debugger;\r",
                    "        this.fireEvent('columnsort', this, column);\r",
                    "    }\r",
                    "});\r",
                    "Ext.override(Ext.dataview.List, {\r",
                    "    beforeInitialize: function() {\r",
                    "        var me = this,\r",
                    "            container = me.container,\r",
                    "            scrollable, scrollViewElement, pinnedHeader;\r",
                    "\r",
                    "        Ext.apply(me, {\r",
                    "            listItems: [],\r",
                    "            headerItems: [],\r",
                    "            updatedItems: [],\r",
                    "            headerMap: [],\r",
                    "            scrollDockItems: {\r",
                    "                top: [],\r",
                    "                bottom: []\r",
                    "            }\r",
                    "        });\r",
                    "\r",
                    "        // We determine the translation methods for headers and items within this List based\r",
                    "        // on the best strategy for the device\r",
                    "        this.translationMethod = Ext.browser.is.AndroidStock2 ? 'cssposition' : 'csstransform';\r",
                    "\r",
                    "        // Create the inner container that will actually hold all the list items\r",
                    "        //SET SCROLLER ALWAYS VISIBLE\r",
                    "        if (!container) {\r",
                    "            container = me.container = Ext.factory({\r",
                    "                xtype: 'container',\r",
                    "                scrollable: {\r",
                    "                    direction: 'vertical',\r",
                    "                        indicators: {\r",
                    "                            y: {\r",
                    "                                autoHide: false\r",
                    "                            }\r",
                    "                        }\r",
                    "                }\r",
                    "            });\r",
                    "        }\r",
                    "\r",
                    "        // We add the container after creating it manually because when you add the container,\r",
                    "        // the items config is initialized. When this happens, any scrollDock items will be added,\r",
                    "        // which in turn tries to add these items to the container\r",
                    "        me.add(container);\r",
                    "\r",
                    "        // We make this List's scrollable the inner containers scrollable\r",
                    "        scrollable = container.getScrollable();\r",
                    "        scrollViewElement = me.scrollViewElement = scrollable.getElement();\r",
                    "        me.scrollElement = scrollable.getScroller().getElement();\r",
                    "\r",
                    "        me.setScrollable(scrollable);\r",
                    "        me.scrollableBehavior = container.getScrollableBehavior();\r",
                    "\r",
                    "        // Create the pinnedHeader instance thats being used when grouping is enabled\r",
                    "        // and insert it into the scrollElement\r",
                    "        pinnedHeader = me.pinnedHeader = Ext.factory({\r",
                    "            xtype: 'listitemheader',\r",
                    "            html: '&nbsp;',\r",
                    "            translatable: {\r",
                    "                translationMethod: this.translationMethod\r",
                    "            },\r",
                    "            cls: ['x-list-header', 'x-list-header-swap']\r",
                    "        });\r",
                    "        pinnedHeader.translate(0, -10000);\r",
                    "        pinnedHeader.$position = -10000;\r",
                    "        scrollViewElement.insertFirst(pinnedHeader.renderElement);\r",
                    "\r",
                    "        // We want to intercept any translate calls made on the scroller to perform specific list logic\r",
                    "        me.bind(scrollable.getScroller().getTranslatable(), 'doTranslate', 'onTranslate');\r",
                    "    }\r",
                    "});\r",
                    "Ext.override(Ext.dataview.DataView, {\r",
                    "    config:{\r",
                    "        scrollable: {\r",
                    "            direction: 'vertical',\r",
                    "                indicators: {\r",
                    "                    y: {\r",
                    "                        autoHide: false\r",
                    "                    }\r",
                    "                }\r",
                    "        }\r",
                    "    },\r",
                    "    scrollable: {\r",
                    "        direction: 'vertical',\r",
                    "            indicators: {\r",
                    "                y: {\r",
                    "                    autoHide: false\r",
                    "                }\r",
                    "            }\r",
                    "    }\r",
                    "});\r",
                    "Ext.override(Ext.Container, {\r",
                    "    getScrollableBehavior: function() {\r",
                    "        //debugger;\r",
                    "        var behavior = this.scrollableBehavior;\r",
                    "\r",
                    "        if (!behavior) {\r",
                    "            behavior = this.scrollableBehavior = new Ext.behavior.Scrollable(this);\r",
                    "        }\r",
                    "\r",
                    "        return behavior;\r",
                    "    }\r",
                    "});\r",
                    "Ext.override(Ext.field.Select, {\r",
                    "    config:{\r",
                    "        usePicker:false\r",
                    "    }\r",
                    "});\r",
                    "Ext.override(Ext.MessageBox, {\r",
                    "    hide:  function() {\r",
                    "        if (this.activeAnimation && this.activeAnimation._onEnd) {\r",
                    "            this.activeAnimation._onEnd();\r",
                    "        }\r",
                    "        return this.callParent(arguments);\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "\r",
                    "Ext.override(Ext.field.Select, {\r",
                    "    getTabletPicker: function() {\r",
                    "        var config = this.getDefaultTabletPickerConfig();\r",
                    "\r",
                    "        if (!this.listPanel) {\r",
                    "            this.listPanel = Ext.create('Ext.Panel', Ext.apply({\r",
                    "                left: 0,\r",
                    "                top: 0,\r",
                    "                scopeS: this,\r",
                    "                modal: true,\r",
                    "                cls: Ext.baseCSSPrefix + 'select-overlay',\r",
                    "                layout: 'fit',\r",
                    "                hideOnMaskTap: true,\r",
                    "                width: Ext.os.is.Phone ? '14em' : '18em',\r",
                    "                height: (Ext.os.is.BlackBerry && Ext.os.version.getMajor() === 10) ? '12em' : (Ext.os.is.Phone ? '12.5em' : '22em'),\r",
                    "                items: [this.listPanelList = Ext.create('Ext.dataview.List',{\r",
                    "                    xtype: 'list',\r",
                    "                    // itemCls:'listItem',\r",
                    "                    store: this.getStore(),\r",
                    "                    itemTpl:  new Ext.XTemplate(\r",
                    "                        '<span>',\r",
                    "                        '<tpl if=\"values.path\">',\r",
                    "                        '<img style =\"width: 30px;height: 30px; background-position: center center;float: left;margin-right: 15px;\"src=\"{[AJAX_URL]}../admin/uploaded_files/{path}\"><span class=\"x-list-label\">{' + this.getDisplayField() + ':htmlEncode}</span>',\r",
                    "                        '</tpl>',\r",
                    "                        '<tpl if=\"!values.path\">',\r",
                    "                            '<span class=\"x-list-label\">{' + this.getDisplayField() + ':htmlEncode}</span>',\r",
                    "                        '</tpl>',\r",
                    "                        '</span>'\r",
                    "                    ),\r",
                    "                    //itemTpl: '<img src= \"../resources/images/{icon}\"><span class=\"x-list-label\">{' + this.getDisplayField() + ':htmlEncode}</span>',\r",
                    "                    listeners: {\r",
                    "                        select: this.onListSelect,\r",
                    "                        itemtap: this.onListTap,\r",
                    "                        scope: this\r",
                    "                    }\r",
                    "                })]\r",
                    "                /*,\r",
                    "                            listeners:{\r",
                    "                                hide:function(a,s){\r",
                    "                                     //this.callParent(arguments);\r",
                    "                                    this.scopeS.listPanelList.destroy();\r",
                    "                                }\r",
                    "                            }*/\r",
                    "                        }, config));\r",
                    "                    }\r",
                    "\r",
                    "                    return this.listPanel;\r",
                    "                }\r",
                    "            });\r",
                    ""
                ]
            },
            "name": "launch",
            "designerId": "9f7a55ff-113a-4c04-96e7-c2863915d1e9"
        }
    ]
}