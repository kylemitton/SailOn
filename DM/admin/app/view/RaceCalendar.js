/*
 * File: app/view/RaceCalendar.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMight.view.RaceCalendar', {
    extend: 'Ext.form.Panel',

    requires: [
        'Ext.calendar.util.Date',
        'Ext.calendar.CalendarPanel',
        'Ext.calendar.data.MemoryCalendarStore',
        'Ext.calendar.data.MemoryEventStore',
        'Ext.calendar.data.Events',
        'Ext.calendar.data.Calendars',
        'Ext.calendar.form.EventWindow'
    ],

    height: 800,
    width: 400,
    layout: 'fit',
    title: 'My Panel',

    initComponent: function() {
        var me = this;

        me.processRaceCalendar(me);
        me.callParent(arguments);
    },

    processRaceCalendar: function(config) {
        var me = this,
            eventStore,
            store = new Ext.data.Store({model: 'race'});

        store.execConfig({
            params: {entityViewID: 90},
            callback: function(store){
                eventStore = Ext.create('Ext.calendar.data.MemoryEventStore', {
                    data: me.processData(store.data)
                });

                me.onCalendar(eventStore);
            }
        });


    },

    onCalendar: function(eventStore) {
        this.calendarStore = Ext.create('Ext.calendar.data.MemoryCalendarStore', {
                    data: Ext.calendar.data.Calendars.getData()
                });

        this.add(
        {
                xtype: 'calendarpanel',
                eventStore: eventStore,
                calendarStore: this.calendarStore,
                border: false,
                id:'app-calendar',
                //region: 'center',
                activeItem: 3, // month view

                monthViewCfg: {
                    showHeader: true,
                    showWeekLinks: true,
                    showWeekNumbers: true
                },

                listeners: {
                    'eventclick': {
                        fn: function(vw, rec, el){
                            this.showEditWindow(rec, el);
                            this.clearMsg();
                        },
                        scope: this
                    },
                    'viewchange': {
                        fn: function(p, vw, dateInfo){
                            if(this.editWin){
                                this.editWin.hide();
                            }
                            if(dateInfo){
                                // will be null when switching to the event edit form so ignore
                                //Ext.getCmp('app-nav-picker').setValue(dateInfo.activeDate);
                                this.setTitle(dateInfo.viewStart, dateInfo.viewEnd);
                            }
                        },
                        scope: this
                    }
                }
            }

        );
    },

    showEditWindow: function(rec, animateTarget) {
        var me = this,
            entityConfig = GetEntityViewByName('race');


        var editForm = Ext.create('DynaMight.view.AddEdit', {
            entityConfig: entityConfig,
            entityStore: rec.raw.record.store,
            entityRecord: rec.raw.record

        });
        //debugger;
        editForm.form.setValues(rec.raw.record.data);
        var window = Ext.create('Ext.window.Window', {
            title: 'Edit' ,
            layout: 'vbox',
            modal: true,
            items: [
                editForm
            ]
        });
        editForm.parentWindow = window;
        window.show();


    },

    clearMsg: function() {
        //Ext.fly('app-msg').update('').addCls('x-hidden');
    },

    processData: function(data) {
        var ret = [],
            d, today = Ext.Date.clearTime(new Date()),
            startDate,
            makeDate = function(date, d, h, m) {
                h = (h || 0) * 60;
                m = (m || 0);
                date = Ext.Date.add(date, Ext.Date.DAY, d);
                return Ext.Date.add(date, Ext.Date.MINUTE, h + m);
            };
        //debugger;
        for (d = 0; d < data.items.length; d++) {

            item = data.items[d];
            startDate = Ext.Date.clearTime(new Date(item.get('startdate')));
            ret.push(
            {
                "id": d,
                "cid": 2,
                "title": item.get('raceseriesname') + '-' + item.get('name'),
                "start": makeDate(startDate, 0, 1, 0),//Ext.Date.add(startDate, Ext.Date.SECOND, 1000),
                "end":  makeDate(startDate, 1, 0 , -1),//Ext.Date.add(startDate, Ext.Date.SECOND, 2000),
                "notes": item.name,
                ad: true,
                record: item,
                rem: item.raw.color
            }
            );


        }
        return ret;
    }

});