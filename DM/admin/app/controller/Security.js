/*
 * File: app/controller/Security.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DynaMight.controller.Security', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.calendar.App'
    ],

    refs: [
        {
            ref: 'contentPanel',
            selector: '#contentPanel'
        },
        {
            ref: 'menuSystem',
            selector: '#menuSystem'
        },
        {
            ref: 'loginPnl',
            selector: '#loginPnl'
        },
        {
            ref: 'appViewport',
            selector: '#appViewportId'
        },
        {
            ref: 'addEdit',
            selector: '#addEdit'
        },
        {
            ref: 'menuPanel',
            selector: '#menuPanel'
        },
        {
            ref: 'userInfo',
            selector: '#userInfo'
        }
    ],

    onMenuItemClick: function(item, e, eOpts) {
        var me = this,
            fields, i, rec, panel,
            store, columns, description;

        if(!item.entityConfig.entityid){
            me.applyClass(item.entityConfig.name.replace(' ', ''));
            return;
        }



        //init fields
        fields = [];//item.entityConfig.Fields.split(",");
        for (i = 0; i < APP.Fields.length; i++) {
            rec = APP.Fields[i];

            if(rec.entityid == item.entityConfig.entityid ){
                fields.push(rec.name);
                APP.FieldsDescriptions[rec.name] = rec.description;
            }
        }

        /*
        //create model
        if(!Ext.ModelManager.isRegistered(item.entityConfig.EntityName)){
            Ext.define(item.entityConfig.EntityName,
                       {
                           extend: 'Ext.data.Model',
                           fields: fields
                       });

        }
        */
        //create grid

        store = new Ext.data.Store({model: item.entityConfig.entityname});
        columns = [];

        for(i = 0; i < fields.length; i++ )
        {
            //debugger;
            description = APP.FieldsDescriptions[fields[i]];

            if(item.entityConfig.ignorecolumns && item.entityConfig.ignorecolumns.indexOf(description) > -1){
                continue;
            }
            columns.push(
                {
                    xtype: 'gridcolumn',
                    sortable: true,
                    dataIndex: fields[i],
                    text: description,
                    flex: 0.25,
                    hidden: (fields[i].indexOf('id') > -1)// || APP.FieldsDescriptions[fields[i]].length == 0)
                }
            );
            if(fields[i].indexOf('id') == -1 && !store.displayField){
                store.displayField = fields[i];
            }
        }
        //debugger;
        panel = Ext.create('DynaMight.view.EntityGrid',{
            entityConfig: item.entityConfig,
            store: store,
            columns: columns,
            title: item.entityConfig.name,

            plugins: item.entityConfig.expandertemplate ? [{
                ptype: 'rowexpander',
                rowBodyTpl : new Ext.XTemplate(item.entityConfig.expandertemplate)
            }] : []
        });

        //
        this.setVisiblePanel(panel);
    },

    onSignInClick: function(button, e, eOpts) {


        var User = this.getLoginPnl().down('#userTxt').getValue();
        var Password = this.getLoginPnl().down('#passwordTxt').getValue();
        var me = this;

        AJAXCommand({

            params: {user: User, password: Password},
            method: 'Login',
            scope: this,
            callback: function(status, message, obj, scope) {
                if (status && obj.user.length > 0) {
                    me.onSuccessLogin(obj);

                }
                else
                {
                    Ext.Msg.show({
                        title: 'Sign in',//T('errLogIn'),
                        msg: 'The email or password you entered is incorrect.',//T(''),
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.ERROR,
                        modal: true
                    });
                }
            }
        });
    },

    onViewportAfterRender: function(component, eOpts) {
        var me = this,
            mainView = Ext.create('DynaMight.view.MainView'),
            menuGroup = [],
            l = APP.Menu.length,
            menuClone,
            menuItems,rec,i,j,r,
            menuGroupInsert;

        //debugger;

        menuClone = Ext.Array.clone(APP.Menu);

        for (i = 0; i < menuClone.length; i++) {

            r = menuClone[i];

            me.createModel(r);

            if(r.menugroupid != null && !Ext.Array.contains(menuGroup, r.menugroupid)){

                menuGroup.push(r.menugroupid);

                this.getMenuPanel().add({
                    xtype: 'panel',
                    title: r.menuname,
                    floating: false,
                    collapsed: menuGroup.length !== 1,
                    items:[
                        menuGroupInsert = Ext.create('Ext.menu.Menu',{
                            floating: false,
                            bodyStyle:'border-style: none;'

                        })
                    ]

                });

                menuItems = APP.Menu.filter(function (el) {
                    return el.menugroupid == menuClone[i].menugroupid;
                });

                for (j = 0; j < menuItems.length; j++) {

                    rec = menuItems[j];

                    if(rec.permission < 1 || rec.interfacetype == 'Tablet'  || rec.interfacetype == 'Mobile' ){
                        continue;
                    }
                    menuGroupInsert.add(
                        {
                            xtype: 'menuitem',
                            itemId: rec.name + 'Id',
                            text: _T(rec.name),
                            iconCls: 'clsEntity',
                            entityConfig: rec,
                            icon: '../common/images/uploaded/' + (rec.path ? rec.path : 'defaultIcon.png')
                        });


                }
            }
        }

        /*
        for (var i = 0; i < APP.Menu.length; i++) {
            var rec =  APP.Menu[i];

            this.createModel(rec);

            if(rec.permission < 1 || rec.interfacetype == 'Tablet'  || rec.interfacetype == 'Mobile' ){
                continue;
            }
            this.getMenuSystem().add(
            {
                xtype: 'menuitem',
                itemId: rec.name + 'Id',
                text: rec.name,
                iconCls: 'clsEntity',
                entityConfig: rec
            });

        }
        */


        me.getLoginPnl().hide();
        me.getAppViewport().add(mainView);
        me.getUserInfo().setValue('Welcome, ' + APP.User.Name);





    },

    onCancelButtonClick: function(button, e, eOpts) {
        this.getAddEdit().parentWindow.close();
    },

    onSaveButtonClick: function(button, e, eOpts) {
        return;
        var me = this, rec, store,
            edit = this.getAddEdit(),
            form = edit.getForm();

        //validate
        if (!form.isValid()) {
            Ext.Msg.show({
                title: 'Invalid form!',//T('errLogIn'),
                msg: 'Form is invalid. Fill in all required fields.',//T(''),
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.ERROR,
                modal: true
            });
            return;
        }

        //exec
        rec = form.getValues();
        rec.entityname = edit.entityConfig.entityname;
        rec.RefreshEntityViewID = edit.entityConfig.entityviewid;
        //rec.EntityFields = this.getAddEdit().entityConfig.Fields;

        store = edit.entityStore ||
            new Ext.data.Store({model: rec.entityname});

        store.execConfig({
            method: 'EditEntity',
            params: rec
        });


        //close
        edit.parentWindow.close();
    },

    onFileFieldChange: function(filefield, value, eOpts) {
        var form = this.getAddEdit().getForm();

        //debugger;
        form.submit({
            url: 'HTTPFileUpload.php',
            waitMsg: 'Uploading your photo...',
            success: function(fp, o) {
                filefield.allowBlank = true;
                var hidden = '#'+ o.fieldName.replace('id','');
                o.form.owner.down(hidden).setValue(o.result.results.uid);
                //Ext.Msg.alert('Success', 'Your photo "' + o.result.file + '" has been uploaded.');
            },
            fail: function(){
                alert('Failed to upload!');
            },
            fieldName: filefield.name,
            clientValidation: false
        });
    },

    onLogoutButtonClick: function(button, e, eOpts) {
        location.reload();

    },

    setVisiblePanel: function(panel) {
        this.getContentPanel().removeAll();
        this.getContentPanel().add(panel);
    },

    onSuccessLogin: function(obj) {
        //debugger;
        // User Session
        APP = {};
        APP.User = {};
        //APP.User.UId = parseInt(obj.user.userid);
        //APP.User.Token = obj.Token;
        APP.User.Name = obj.user[0].username;
        //MENU
        APP.Menu = obj.menu;
        //
        APP.Properties = obj.properties;
        APP.Fields = obj.fields;
        APP.Configurations = obj.configurations;
        APP.Resources = obj.resources;

        APP.FieldsDescriptions = [];

        Ext.create('DynaMight.view.AppViewport');
    },

    createModel: function(item) {
        //init fields
        var fields = [];//item.entityConfig.Fields.split(",");
        for (var i = 0; i < APP.Fields.length; i++) {
            var rec = APP.Fields[i];

            if(rec.entityid == item.entityid ){
                fields.push(rec.name);
            }
        }
        //debugger;

        //create model
        if(!Ext.ModelManager.isRegistered(item.entityname)){
            Ext.define(item.entityname,
                       {
                           extend: 'Ext.data.Model',
                           fields: fields
                       });

        }
    },

    applyClass: function(className) {
        var me = this,
            panel;


        panel = Ext.create('DynaMight.view.' + className, {});

        //panel = Ext.create('Ext.calendar.App');

        this.setVisiblePanel(panel);
    },

    init: function(application) {
        this.control({
            "menuitem": {
                click: this.onMenuItemClick
            },
            "#signInBtn": {
                click: this.onSignInClick
            },
            "#appViewportId": {
                afterrender: this.onViewportAfterRender
            },
            "#cancelBtn1": {
                click: this.onCancelButtonClick
            },
            "#saveBtn1": {
                click: this.onSaveButtonClick
            },
            "filefield": {
                change: this.onFileFieldChange
            },
            "#logoutBtn": {
                click: this.onLogoutButtonClick
            }
        });
    }

});
