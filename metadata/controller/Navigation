{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Navigation",
        "requires": [
            "Ext.data.proxy.Sql"
        ]
    },
    "designerId": "b65f72c1-bee5-4e5a-9fed-ce939650a75c",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#navBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onNavigate",
                "implHandler": [
                    "var me = this;",
                    "function applyMenu(){",
                    "    Ext.Viewport.setMasked(true);",
                    "    new Ext.util.DelayedTask(function(){",
                    "        me.applyClass('MenuView');",
                    "        me.getTopCardLbl().setHtml('Canberra Yacht Club');",
                    "    }).delay(250);",
                    "}",
                    "",
                    "if(APP.WarningUnsavedData){",
                    "    Ext.Msg.confirm(\"Confirm unsaved data\", \"You have unsaved data. Do you want to leave this page and lose your changes?\", function(btn){",
                    "        if (btn == 'yes'){",
                    "           applyMenu();",
                    "            APP.WarningUnsavedData = false;",
                    "        }",
                    "",
                    "    });",
                    "}",
                    "else{",
                    "    applyMenu();",
                    "}",
                    "",
                    ""
                ],
                "name": "tap"
            },
            "name": "onNavigate",
            "designerId": "7d2ec394-96f9-46bd-afc0-b4bea517cc08"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainCt",
                "selector": "container#mycontainer"
            },
            "name": "mainCt",
            "designerId": "aef655c5-65b2-4904-ae5f-0674f5dbc5ee"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "homePanel",
                "selector": "panel#homePanel"
            },
            "name": "homePanel",
            "designerId": "2ddddc27-d972-437d-a48a-d7a1b27feeb9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menuList",
                "selector": "list#MenuList"
            },
            "name": "menuList",
            "designerId": "95d154eb-7a7b-4f4e-99f9-a45fa1c504db"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#mainCtId",
                "designer|targetType": "Ext.Container",
                "fn": "onMainInitialize",
                "implHandler": [
                    "",
                    "var conf = {user: 'Sail', password: 'Sail'};",
                    "this.onLogin(conf);",
                    "return;",
                    "if(localStorage.goOffline){",
                    "    this.getLoadLocalStorage().setHidden(true);",
                    "    this.getSyncLocalStorage().setHidden(false);",
                    "    this.getSyncLocalStorage().setStyle('color:red;');",
                    "}",
                    "else{",
                    "",
                    "    this.getLoadLocalStorage().setHidden(false);",
                    "    this.getSyncLocalStorage().setHidden(true);",
                    "    this.getSyncLocalStorage().setStyle('color:white;');",
                    "}"
                ],
                "name": "initialize"
            },
            "name": "onMainInitialize",
            "designerId": "e2bc933a-9cf6-4868-81fd-56014ca8013c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "item"
                ],
                "fn": "createModel",
                "implHandler": [
                    "//init fields",
                    "var fields = [];//item.entityConfig.Fields.split(\",\");",
                    "for (var i = 0; i < APP.Fields.length; i++) {",
                    "    var rec = APP.Fields[i];",
                    "",
                    "    if(rec.entityid == item.entityid ){",
                    "        fields.push(rec.name);",
                    "    }",
                    "}",
                    "//debugger;",
                    "",
                    "//create model",
                    "if(!Ext.ModelManager.isRegistered(item.entityname)){",
                    "    Ext.define(item.entityname,",
                    "               {",
                    "                   extend: 'Ext.data.Model',",
                    "                   fields: fields",
                    "               });",
                    "",
                    "",
                    "}"
                ]
            },
            "name": "createModel",
            "designerId": "a441fa07-dc9e-4060-86f2-82264c7a6119"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onAdd",
                "implHandler": [
                    "var items = [{\r",
                    "        xtype: 'toolbar',\r",
                    "        docked: 'top',\r",
                    "        items: [{\r",
                    "            xtype: 'button',\r",
                    "            id: 'cancelBtn',\r",
                    "            ui: 'back',\r",
                    "            iconMask: false,\r",
                    "            text: 'Cancel'\r",
                    "        },{\r",
                    "            xtype: 'spacer'\r",
                    "        },{\r",
                    "            xtype: 'button',\r",
                    "            id: 'saveBtn',\r",
                    "            ui: 'save',\r",
                    "            iconMask: false,\r",
                    "            text: 'Save'\r",
                    "        }]\r",
                    "    }],\r",
                    "    entityFields = '';\r",
                    "//debugger;\r",
                    "\r",
                    "//CREATE COMBOS\r",
                    "for (var i = 0; i < APP.Properties.length; i++) {\r",
                    "    var rec = APP.Properties[i],\r",
                    "        entityView;\r",
                    "\r",
                    "    if(rec.ChildEntityID == APP.CurrentItem.EntityID)\r",
                    "    {\r",
                    "        entityFields += (entityFields ? ',' : '') + rec.ChildName;\r",
                    "\r",
                    "        entityView = GetEntityView(rec.ParentEntityID);\r",
                    "\r",
                    "        //debugger;\r",
                    "        CreateModel(rec.EntityName, rec.ParentEntityID);\r",
                    "\r",
                    "        var store = new Ext.data.Store({model: rec.EntityName});\r",
                    "        store.execConfig({\r",
                    "            params: {entityViewID: entityView.EntityViewID, filters: \"\"}\r",
                    "        });\r",
                    "        //debugger;\r",
                    "        items.push({\r",
                    "            xtype: 'selectfield',\r",
                    "            name : rec.ChildName,\r",
                    "            label: rec.Description || rec.ChildName,\r",
                    "\r",
                    "\r",
                    "\r",
                    "            itemId: 'cmb' + rec.ChildName,\r",
                    "            fieldLabel: rec.Description || rec.ChildName,\r",
                    "\r",
                    "            displayField: GetDisplayField(store._model.prototype.fields.items),//store.displayField,//store.model.prototype.fields.items[1].name,\r",
                    "            store: store,\r",
                    "            valueField: rec.ParentName,\r",
                    "            displayTplTmp1: Ext.create('Ext.XTemplate',\r",
                    "                '<tpl for=\".\">',\r",
                    "                    (entityView.PickerTemplate || GetDisplayField(store._model.prototype.fields.items)),\r",
                    "                '</tpl>'\r",
                    "            )\r",
                    "        });\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "//CREATE ITEMS + LIST OF FIELDS\r",
                    "for (var i = 0; i < APP.Fields.length; i++) {\r",
                    "    var rec = APP.Fields[i];\r",
                    "\r",
                    "    if(rec.entityid != APP.CurrentItem.entityid || rec.iseditable == '0') continue;\r",
                    "    entityFields += (entityFields ? ',' : '') + rec.name;\r",
                    "    var obj = {\r",
                    "        xtype:rec.xtype == 'hidden' ? 'hiddenfield' : rec.xtype,\r",
                    "        itemId: rec.propertyid,\r",
                    "        name: rec.name,\r",
                    "        label: rec.name//,\r",
                    "        //labelAlign: 'top'\r",
                    "    };\r",
                    "    items.push(obj);\r",
                    "}\r",
                    "\r",
                    "items.push({\r",
                    "    xtype:'hiddenfield',\r",
                    "    itemId: 'entityFieldsId',\r",
                    "    name: 'EntityFields',\r",
                    "    value: entityFields\r",
                    "});\r",
                    "\r",
                    "//CREATE FORM PANEL\r",
                    "var panel = Ext.create('Ext.form.Panel',{\r",
                    "    height: '100%',\r",
                    "    //config: {\r",
                    "    items: [{\r",
                    "        xtype: 'fieldset',\r",
                    "        id: 'fieldSet',\r",
                    "        title: APP.CurrentItem.Name,\r",
                    "        instructions: 'Please enter the information above.',\r",
                    "        defaults: {\r",
                    "            labelWidth: '35%'\r",
                    "        },\r",
                    "        items: items\r",
                    "    }]\r",
                    "    //}\r",
                    "\r",
                    "});\r",
                    "APP.List.setHidden(true);\r",
                    "APP.AddEdit = panel;\r",
                    "//this.getHomePanel().removeAll();\r",
                    "this.getHomePanel().add(panel);"
                ]
            },
            "name": "onAdd",
            "designerId": "be66557d-f751-4f3d-bb84-52bdfe62c375"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#addBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onAddButtonTap",
                "implHandler": [
                    "if(APP.List)\r",
                    "    this.onAdd();"
                ],
                "name": "tap"
            },
            "name": "onAddButtonTap",
            "designerId": "ca4f42c3-a670-4273-bab5-bdc73b164ee2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#saveBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onSave",
                "implHandler": [
                    "var me = this;\r",
                    "//validate\r",
                    "if (false) {\r",
                    "    Ext.Msg.show({\r",
                    "        title: 'Invalid form!',//T('errLogIn'),\r",
                    "        msg: 'Form is invalid. Fill in all required fields.',//T(''),\r",
                    "        buttons: Ext.Msg.OK,\r",
                    "        icon: Ext.Msg.ERROR,\r",
                    "        modal: true\r",
                    "    });\r",
                    "    return;\r",
                    "}\r",
                    "//exec\r",
                    "//debugger;\r",
                    "var rec = APP.AddEdit.getValues();\r",
                    "rec.EntityName = APP.CurrentItem.EntityName;\r",
                    "rec.RefreshEntityViewID = APP.CurrentItem.EntityViewID;\r",
                    "//rec.EntityFields = this.getAddEdit().entityConfig.Fields;\r",
                    "var store = APP.List.getStore();\r",
                    "\r",
                    "\r",
                    "store.execConfig({\r",
                    "    method: 'EditEntity',\r",
                    "    params: rec\r",
                    "});\r",
                    "\r",
                    "\r",
                    "APP.List.setHidden(false);\r",
                    "APP.AddEdit.setHidden(true);"
                ],
                "name": "tap"
            },
            "name": "onSave",
            "designerId": "2f22fd09-743b-4cba-b133-58ba5f5f8799"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#cancelBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onCancel",
                "implHandler": [
                    "\r",
                    "APP.List.setHidden(false);\r",
                    "APP.AddEdit.setHidden(true);\r",
                    "//this.getHomePanel().removeAll();\r",
                    "//this.getHomePanel().add(APP.List);"
                ],
                "name": "tap"
            },
            "name": "onCancel",
            "designerId": "8b8259fd-5f13-4c7b-979e-a775dca58f20"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list#listId",
                "designer|targetType": "Ext.dataview.List",
                "fn": "onEntityItemTap",
                "implHandler": [
                    "//debugger;\r",
                    "if(!dataview.config.childentityviewid) return;\r",
                    "\r",
                    "var me = this,\r",
                    "    menuItem,\r",
                    "    listItem;\r",
                    "\r",
                    "\r",
                    "for (var i = 0; i < APP.Menu.length; i++) {\r",
                    "    listItem =  APP.Menu[i];\r",
                    "    if(listItem.EntityViewID == dataview.config.ChildEntityViewID){\r",
                    "        me.applyList(listItem, record);\r",
                    "        return;\r",
                    "    }\r",
                    "}\r",
                    "\r",
                    ""
                ],
                "name": "itemtap"
            },
            "name": "onEntityItemTap",
            "designerId": "7aebdfce-33b8-4791-8caf-0eb81229704c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "item",
                    "record"
                ],
                "fn": "applyList",
                "implHandler": [
                    "//create model",
                    "//init fields",
                    "var me = this,",
                    "    fields = [],",
                    "    store, panel;",
                    "",
                    "fields = CreateModel(item.entityname, item.entityid);",
                    "",
                    "//create grid",
                    "store = new Ext.data.Store({model: item.entityname});",
                    "//store.getModel().save();",
                    "",
                    "store.execConfig({",
                    "    params: {",
                    "        entityViewID: item.entityviewid ,",
                    "        filters: (record ? ' WHERE ' + item.childpropertyname + ' = ' + record.get(item.parentpropertyname) : '')",
                    "",
                    "    }",
                    "});",
                    "",
                    "",
                    "me.getHomePanel().removeAll(true, false);",
                    "//debugger;",
                    "panel = Ext.create('Ext.dataview.List',{",
                    "    itemId: 'listId',//+ item.EntityName,",
                    "    //entityConfig: item,",
                    "    store: store,",
                    "    //columns: columns,",
                    "    itemTpl: [ item.mobiletemplate],",
                    "    plugins: [",
                    "        {",
                    "            xclass: 'Ext.plugin.PullRefresh',",
                    "            pullText: 'Pull down for Refresh!'",
                    "        }",
                    "    ],",
                    "    ChildEntityViewID: item.childentityviewid,",
                    "    EntityViewID: item.entityviewid",
                    "    ",
                    "});",
                    "",
                    "me.getHomePanel().add(panel);",
                    "",
                    "APP.List = panel;",
                    "APP.CurrentItem = item;",
                    ""
                ]
            },
            "name": "applyList",
            "designerId": "fbe9878e-fa20-4599-a6b2-49a6e6e207af"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "searchfield#search",
                "designer|targetType": "Ext.field.Search",
                "fn": "onSearchfieldChange",
                "implHandler": [
                    "if(APP.List && APP.List.config.itemTpl.length > 0){\r",
                    "\r",
                    "    var regExp = /\\{(.*?)\\}/;\r",
                    "    var matches = regExp.exec(APP.List.config.itemTpl[0]);\r",
                    "\r",
                    "    var filter = ' WHERE ' + matches[1] + \" like '%\" + newValue + \"%'\";\r",
                    "\r",
                    "    APP.List.getStore().execConfig({\r",
                    "        params: {\r",
                    "            entityViewID: APP.List.config.entityviewid ,\r",
                    "            filters: filter\r",
                    "\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "    //debugger;\r",
                    "}"
                ],
                "name": "change"
            },
            "name": "onSearchfieldChange",
            "designerId": "75fc137e-8393-4132-b98f-88365b1d54f6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "className"
                ],
                "fn": "applyClass",
                "implHandler": [
                    "var me = this,",
                    "    panel;",
                    "",
                    "//Ext.Viewport.removeAll(true,false);",
                    "me.getHomePanel().removeAll(true,true);",
                    "/*",
                    "if (className == 'SeriesWizard')",
                    "    panel = APPSW;",
                    "else if (className == 'RaceStartWizard')",
                    "    panel = APPRS;",
                    "else if (className == 'RaceFinishWizard')",
                    "    panel = APPRF;",
                    "else if (className == 'SignOnWizard')",
                    "    panel = APPSO;",
                    "else",
                    "    */",
                    "",
                    "     panel = Ext.create('DynaMightMobile.view.' + className);",
                    "//alert('x');",
                    "//Ext.Viewport.add(panel);",
                    "me.getHomePanel().add(panel);"
                ]
            },
            "name": "applyClass",
            "designerId": "338ae343-a7a9-45ad-a54e-3ff3410a32fc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onSignIn",
                "implHandler": [
                    "var me = this,",
                    "    view = APP.Configurations.MobileDefaultView;",
                    "//debugger;",
                    "Ext.Viewport.setMasked({",
                    "    xtype: 'loadmask',",
                    "    message: 'Loading...'",
                    "});",
                    "",
                    "",
                    "if(view){",
                    "    this.applyClass(view.replace(' ', ''));",
                    "}",
                    "",
                    "",
                    "me.getTopCardLbl().setHtml('Canberra Yacht Club - ' + view);",
                    "",
                    "Ext.Viewport.setMasked(false);",
                    "APP.loggedIn = true;"
                ]
            },
            "name": "onSignIn",
            "designerId": "44401f70-4ce0-4521-8325-62232d357c23"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "sideMenu",
                "selector": "container#sideMenuContainer"
            },
            "name": "sideMenu",
            "designerId": "4b48e554-68e2-4bdb-9366-ea1f75fbc9e6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "eve"
                ],
                "fn": "onBackKeyDown",
                "implHandler": [
                    "eve.preventDefault();\r",
                    "if (APP.loggedIn ){\r",
                    "\r",
                    "    Ext.Msg.confirm(\"Confirm exit\", \"Are you sure you want to exit?\", function(btn){\r",
                    "        if (btn == 'yes'){\r",
                    "            window.location = 'index.html';\r",
                    "            navigator.app.exitApp();\r",
                    "            return;\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "}else\r",
                    "{\r",
                    "    navigator.app.exitApp();\r",
                    "}"
                ]
            },
            "name": "onBackKeyDown",
            "designerId": "11db7838-5cfe-485f-adec-4ab6a16d4f0f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "navBtn",
                "selector": "button#navBtn"
            },
            "name": "navBtn",
            "designerId": "67887036-3fa9-4ac2-81e9-625c390398f9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "topCardLbl",
                "selector": "label#topCardLbl"
            },
            "name": "topCardLbl",
            "designerId": "0041a6ed-d44c-4b27-9558-c6ed49bdfdc9"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#mycontainer55",
                "designer|targetType": "Ext.Container",
                "fn": "onMenuContainerInitialize",
                "implHandler": [
                    "var me = this,",
                    "    viewStore,",
                    "    menuView = component.down('#menuView');",
                    "",
                    "viewStore = CreateStore(\"sysentityview\");",
                    "viewStore.addData(APP.Permissions);",
                    "menuView.setStore(viewStore);"
                ],
                "name": "initialize"
            },
            "name": "onMenuContainerInitialize",
            "designerId": "972a1f35-64d8-4c76-9c56-12fdbd145262"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#mainLogInBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onLogInButtonTap",
                "implHandler": [
                    "this.applyClass('LogInFrm');\r",
                    "\r",
                    "this.getTopCardLbl().setHtml('Canberra Yacht Club');\r",
                    ""
                ],
                "name": "tap"
            },
            "name": "onLogInButtonTap",
            "designerId": "c3e00ca8-67a2-45ab-a9e7-0728228e9791"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#lLoginBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onLoginActionButtonTap",
                "implHandler": [
                    "var frm = this.getLogInFrm().getValues(),\r",
                    "    conf = {\r",
                    "        user: frm.username,\r",
                    "        password: frm.password\r",
                    "};\r",
                    "\r",
                    "this.onLogin(conf);"
                ],
                "name": "tap"
            },
            "name": "onLoginActionButtonTap",
            "designerId": "678b294e-a40d-4da4-bdea-a57eb159a4e3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "conf"
                ],
                "fn": "onLogin",
                "implHandler": [
                    "APP = {};",
                    "var me = this,",
                    "    i, rec, permissions = [];",
                    "",
                    "AJAXCommand({",
                    "    params: conf,",
                    "    method: 'Login',",
                    "    scope: me,",
                    "    callback: function(status, message, obj, scope) {",
                    "        if (status) {",
                    "            if(!obj.menu){",
                    "                Ext.Msg.show({",
                    "                    title: 'Log In',//T('errLogIn'),",
                    "                    message: 'Username or password is incorect!',//T(''),",
                    "                    buttons: Ext.Msg.OK,",
                    "                    icon: Ext.Msg.ERROR,",
                    "                    modal: true",
                    "                });",
                    "                return;",
                    "            }",
                    "",
                    "            //DynaMightMobile.app.getController('Navigation').loadMenu(obj.menu);",
                    "            APP.Fields = obj.fields;",
                    "            APP.Menu = obj.menu;",
                    "            APP.Properties = obj.properties;",
                    "            APP.Configurations = {};",
                    "            APP.Entities = obj.entities;",
                    "            APP.Permissions = [];",
                    "",
                    "            //debugger;",
                    "            //models",
                    "            for (i = 0; i < obj.menu.length; i++) {",
                    "                rec = obj.menu[i];",
                    "",
                    "                if(rec.permission > 0 && (rec.interfacetype == 'Tablet'  || rec.interfacetype == 'Mobile' || rec.interfacetype == 'All')){",
                    "                    rec.displayname = rec.name.toUpperCase();",
                    "                    permissions.push(rec);",
                    "                }",
                    "            }",
                    "",
                    "            APP.Permissions = permissions;",
                    "",
                    "            //config",
                    "            for (i = 0; i < obj.configurations.length; i++) {",
                    "                rec =  obj.configurations[i];",
                    "                APP.Configurations[rec.name] = rec.value;",
                    "                //me.createModel(rec);",
                    "            }",
                    "            //menu View",
                    "            //Ext.Viewport.add(Ext.create('DynaMightMobile.view.MenuView'));",
                    "",
                    "",
                    "            /*",
                    "            new Ext.util.DelayedTask(function(){",
                    "                APPSW = new DynaMightMobile.view.SeriesWizard();",
                    "                APPRS = new DynaMightMobile.view.RaceStartWizard();",
                    "                APPRF = new DynaMightMobile.view.RaceFinishWizard();",
                    "                APPSO = new DynaMightMobile.view.SignOnWizard();",
                    "            }).delay(0);",
                    "            */",
                    "            me.onSignIn();",
                    "        }",
                    "        else",
                    "        {",
                    "            Ext.Msg.show({",
                    "                title: 'Sign in',//T('errLogIn'),",
                    "                msg: 'Error.',//T(''),",
                    "                buttons: Ext.Msg.OK,",
                    "                icon: Ext.Msg.ERROR,",
                    "                modal: true",
                    "            });",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "name": "onLogin",
            "designerId": "6c7b365b-8357-4d92-a15c-c9ae5b7ca127"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "logInFrm",
                "selector": "formpanel#registrationLoginFrm1"
            },
            "name": "logInFrm",
            "designerId": "4e96076a-655e-44ed-8804-550d3b055704"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#loadLocalStorage",
                "designer|targetType": "Ext.Button",
                "fn": "onLoadLocalStorage",
                "implHandler": [
                    "var me = this;",
                    "me.loadItemsLocalStorage = 0;",
                    "if(localStorage.goOffline)",
                    "{",
                    "    Ext.Msg.alert('Ooops', 'Values already in local storage');",
                    "    return;",
                    "}",
                    "Ext.Msg.confirm(\"Go offline\",",
                    "                \"Are you sure you want to go offline? Starting now server connection won't be available\",",
                    "      function(btn){",
                    "    if (btn == 'yes'){",
                    "        Ext.Viewport.setMasked({",
                    "            xtype: 'loadmask',",
                    "            message: 'Going offline'",
                    "        });",
                    "        var boatStore = CreateStore(\"raceboat\",'raceboatSQL'),",
                    "",
                    "            raceEntity = GetEntityByName(\"race\"),",
                    "            raceSeriesDevEntity = GetEntityByName('raceseriesdivision'),",
                    "            raceStore = CreateStore(\"race\",'raceSQL'),",
                    "            boatDivisionsStore = CreateStore(\"raceboatdivision\",'raceboatdivisionSQL'),",
                    "            boatSeriesStore = CreateStore(\"raceseriesdivision\",'raceseriesdivisionSQL');",
                    "",
                    "        boatStore.parentScope = me;",
                    "        boatStore.execConfig({",
                    "            params: {",
                    "                entityViewID: GetEntityViewByName('BR').entityviewid ,",
                    "                filters: 'WHERE cast(startdate as date) = curdate()'",
                    "            },",
                    "            callback:function(data,operation,d,f){",
                    "                this.parentScope.setSQLStore(this,data);",
                    "                this.parentScope.loadItemsLocalStorage++;",
                    "                if(this.parentScope.loadItemsLocalStorage === 4){",
                    "                    Ext.Msg.alert('Offline', 'You are working offline now');",
                    "                    Ext.Viewport.setMasked(false);",
                    "",
                    "                    me.getLoadLocalStorage().setHidden(true);",
                    "                    me.getSyncLocalStorage().setHidden(false);",
                    "                    me.getSyncLocalStorage().setStyle('color:red;');",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "        boatSeriesStore.parentScope = me;",
                    "        boatSeriesStore.execConfig({",
                    "            params: {",
                    "                entityViewID: GetEntityView(raceSeriesDevEntity.entityid).entityviewid ,",
                    "                filters: ''",
                    "            },",
                    "            callback:function(data,operation,d,f){",
                    "                this.parentScope.setSQLStore(this,data);",
                    "                this.parentScope.loadItemsLocalStorage++;",
                    "                if(this.parentScope.loadItemsLocalStorage === 4){",
                    "                    Ext.Msg.alert('Offline', 'You are working offline now');",
                    "                    Ext.Viewport.setMasked(false);",
                    "",
                    "                    me.getLoadLocalStorage().setHidden(true);",
                    "                    me.getSyncLocalStorage().setHidden(false);",
                    "                    me.getSyncLocalStorage().setStyle('color:red;');",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "",
                    "        raceStore.parentScope = me;",
                    "        raceStore.execConfig({",
                    "            params: {",
                    "                entityViewID: GetEntityView(raceEntity.entityid).entityviewid ,",
                    "                filters: 'WHERE cast(startdate as date) = curdate()'",
                    "            },",
                    "            callback:function(data,operation,d,f){",
                    "                this.parentScope.setSQLStore(this,data);",
                    "                this.parentScope.loadItemsLocalStorage++;",
                    "                if(this.parentScope.loadItemsLocalStorage === 4){",
                    "                    Ext.Msg.alert('Offline', 'You are working offline now');",
                    "                    Ext.Viewport.setMasked(false);",
                    "",
                    "                    me.getLoadLocalStorage().setHidden(true);",
                    "                    me.getSyncLocalStorage().setHidden(false);",
                    "                    me.getSyncLocalStorage().setStyle('color:red;');",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "",
                    "        boatDivisionsStore.parentScope = me;",
                    "        boatDivisionsStore.execConfig({",
                    "            params: {",
                    "                entityViewID: GetEntityViewByName('SD').entityviewid ,",
                    "                filters: ''",
                    "            },",
                    "            callback:function(data,operation,d,f){",
                    "                this.parentScope.setSQLStore(this,data);",
                    "                this.parentScope.loadItemsLocalStorage++;",
                    "                if(this.parentScope.loadItemsLocalStorage === 4){",
                    "                    Ext.Msg.alert('Offline', 'You are working offline now');",
                    "                    Ext.Viewport.setMasked(false);",
                    "",
                    "                    me.getLoadLocalStorage().setHidden(true);",
                    "                    me.getSyncLocalStorage().setHidden(false);",
                    "                    me.getSyncLocalStorage().setStyle('color:red;');",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "        /*Also add menu,entityes, fields*/",
                    "        var menuFields = [",
                    "            \"childentityviewid\",",
                    "            \"childpropertyname\",",
                    "            \"entityid\",",
                    "            \"entityname\",",
                    "            \"entityviewid\",",
                    "            \"expandertemplate\",",
                    "            \"ignorecolumns\",",
                    "            \"interfacetype\",",
                    "            \"ismenu\",",
                    "            \"mobiletemplate\",",
                    "            \"name\",",
                    "            \"parentpropertyname\",",
                    "            \"permission\",",
                    "            \"pickertemplate\",",
                    "            \"sqltext\"",
                    "        ];",
                    "        me.setSQLStoreStatic(APP.Menu,\"menu\", menuFields);",
                    "",
                    "        var entitiFields = [",
                    "            \"description\",",
                    "            \"entityid\",",
                    "            \"entitytypeid\",",
                    "            \"name\"",
                    "        ];",
                    "        me.setSQLStoreStatic(APP.Entities,\"entity\", entitiFields);",
                    "",
                    "        var configFields = [",
                    "            \"name\",",
                    "            \"value\"",
                    "        ];",
                    "        var configData = [];",
                    "        for(var propertyName in APP.Configurations) {",
                    "",
                    "            configData.push({name:propertyName, value:APP.Configurations[propertyName]});",
                    "",
                    "        }",
                    "        me.setSQLStoreStatic(configData,\"configurations\", configFields);",
                    "",
                    "        var fieldsFields = [",
                    "",
                    "            \"config\",",
                    "            \"defaultvalue\",",
                    "            \"description\",",
                    "            \"entityid\",",
                    "            \"iseditable\",",
                    "            \"isonlyview\",",
                    "            \"name\",",
                    "            \"priority\",",
                    "            \"propertyid\",",
                    "            \"xtype\"",
                    "        ];",
                    "        me.setSQLStoreStatic(APP.Fields,\"fields\", fieldsFields);",
                    "",
                    "        localStorage.goOffline = true;",
                    "",
                    "    }",
                    "});",
                    ""
                ],
                "name": "tap"
            },
            "name": "onLoadLocalStorage",
            "designerId": "0b6ba173-b015-4c45-8029-a400e496ac3e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "store",
                    "data",
                    "model"
                ],
                "fn": "setSQLStore",
                "implHandler": [
                    " var model = store.getModel();\r",
                    "//create fields\r",
                    "var fields =[];\r",
                    "if(data.length === 0)\r",
                    "{\r",
                    "    for(var i = 0; i< model.getFields().length; i++){\r",
                    "        fields.push(model.getFields().items[i].getName());\r",
                    "    }\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    for(var propertyName in data[0].data) {\r",
                    "        if( data[0].data[propertyName] !== undefined)\r",
                    "        {\r",
                    "            fields.push(propertyName);\r",
                    "        }\r",
                    "        else{\r",
                    "            for(var i=0; i<data.length;i++){\r",
                    "                data[i].data[propertyName] = '';\r",
                    "            }\r",
                    "            fields.push(propertyName);\r",
                    "        }\r",
                    "    }\r",
                    "}\r",
                    "fields.push(\"sysrowstate\");\r",
                    "Ext.define(model.getName()+\"SQL\", {\r",
                    "    extend: \"Ext.data.Model\",\r",
                    "    phantom:true,\r",
                    "    config: {\r",
                    "        phantom:true,\r",
                    "        idProperty:'id',\r",
                    "        fields:fields\r",
                    "    }\r",
                    "});\r",
                    "var sqlStore = Ext.create(\"Ext.data.Store\", {\r",
                    "    model: model.getName()+\"SQL\",\r",
                    "    //storeId: \"Users\",\r",
                    "    proxy: {\r",
                    "        type: \"sql\"\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "for(var i=0; i<data.length;i++){\r",
                    "    data[i].data.sysrowstate = '0';\r",
                    "    sqlStore.add(data[i].data);\r",
                    "}\r",
                    "sqlStore.sync();"
                ]
            },
            "name": "setSQLStore",
            "designerId": "7f9b64eb-6994-41ad-8127-75ece2dd330b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "data",
                    "modelName",
                    "modelFields",
                    "load"
                ],
                "fn": "setSQLStoreStatic",
                "implHandler": [
                    "//debugger;\r",
                    "modelFields.push(\"sysrowstate\");\r",
                    "\r",
                    "Ext.define(modelName+\"SQL\", {\r",
                    "    extend: \"Ext.data.Model\",\r",
                    "    phantom:true,\r",
                    "    config: {\r",
                    "        phantom:true,\r",
                    "        idProperty:'id',\r",
                    "        fields:modelFields\r",
                    "    }\r",
                    "});\r",
                    "var sqlStore = Ext.create(\"Ext.data.Store\", {\r",
                    "    model: modelName+\"SQL\",\r",
                    "    pageSize:1000,\r",
                    "    config:{\r",
                    "        pageSize:1000\r",
                    "    },\r",
                    "    proxy: {\r",
                    "        type: \"sql\"\r",
                    "    }\r",
                    "});\r",
                    "if(load)\r",
                    "{\r",
                    "    this.loadedItems = 0;\r",
                    "    sqlStore.load({callback: function(data,s,df){\r",
                    "        var modelName = s.getModel().getName();\r",
                    "        if (modelName === 'menuSQL'){\r",
                    "            APP.Menu = [];\r",
                    "            for(var i=0; i<data.length; i++){\r",
                    "                APP.Menu.push(data[i].data);\r",
                    "            }\r",
                    "\r",
                    "            var rec;\r",
                    "            APP.Permissions = [];\r",
                    "            for (i = 0; i < APP.Menu.length; i++) {\r",
                    "                rec = APP.Menu[i];\r",
                    "                if(rec.permission > 0 && (rec.interfacetype == 'Tablet'  || rec.interfacetype == 'Mobile' || rec.interfacetype == 'All')){\r",
                    "                    rec.displayname = rec.name.toUpperCase();\r",
                    "                    APP.Permissions.push(rec);\r",
                    "                }\r",
                    "            }\r",
                    "            this.loadedItems++;\r",
                    "            if(this.loadedItems === 4){\r",
                    "                /*var viewStore = CreateStore(\"sysentityview\");\r",
                    "                viewStore.addData(APP.Permissions);\r",
                    "                this.getMenuView().setStore(viewStore);*/\r",
                    "                this.onSignIn();\r",
                    "            }\r",
                    "\r",
                    "        }\r",
                    "        else if(modelName === 'entitySQL'){\r",
                    "            APP.Entities = [];\r",
                    "\r",
                    "            for(var i=0; i<data.length; i++){\r",
                    "                APP.Entities.push(data[i].data);\r",
                    "            }\r",
                    "            this.loadedItems++;\r",
                    "            if(this.loadedItems === 4){\r",
                    "                /*var viewStore = CreateStore(\"sysentityview\");\r",
                    "                viewStore.addData(APP.Permissions);\r",
                    "                this.getMenuView().menuView.setStore(viewStore);*/\r",
                    "                this.onSignIn();\r",
                    "            }\r",
                    "        }\r",
                    "        else if(modelName === 'fieldsSQL'){\r",
                    "            APP.Fields = [];\r",
                    "            for(var i=0; i<data.length; i++){\r",
                    "                APP.Fields.push(data[i].data);\r",
                    "            }\r",
                    "            this.loadedItems++;\r",
                    "            if(this.loadedItems === 4){\r",
                    "                /*var viewStore = CreateStore(\"sysentityview\");\r",
                    "                viewStore.addData(APP.Permissions);\r",
                    "                this.getMenuView().menuView.setStore(viewStore);*/\r",
                    "                this.onSignIn();\r",
                    "            }\r",
                    "        }\r",
                    "        /*else if(modelName === 'permissionsSQL'){\r",
                    "            APP.Permissions = [];\r",
                    "            for(var i=0; i<data.length; i++){\r",
                    "                APP.Permissions.push(data[i].data);\r",
                    "            }\r",
                    "\r",
                    "\r",
                    "        }*/\r",
                    "        else if(modelName === 'configurationsSQL'){\r",
                    "            APP.Configurations = [];\r",
                    "            for (i = 0; i < data.length; i++) {\r",
                    "                var rec =  data[i];\r",
                    "                APP.Configurations[rec.data.name] = rec.data.value;\r",
                    "\r",
                    "            }\r",
                    "            this.loadedItems++;\r",
                    "            if(this.loadedItems === 4){\r",
                    "               /* var viewStore = CreateStore(\"sysentityview\");\r",
                    "                viewStore.addData(APP.Permissions);\r",
                    "                this.getMenuView().menuView.setStore(viewStore);*/\r",
                    "                this.onSignIn();\r",
                    "            }\r",
                    "        }\r",
                    "    },scope:this});\r",
                    "    return sqlStore;\r",
                    "}\r",
                    "for(var i=0; i<data.length;i++){\r",
                    "    data[i].sysrowstate = '0';\r",
                    "    sqlStore.add(data[i]);\r",
                    "}\r",
                    "sqlStore.sync();"
                ]
            },
            "name": "setSQLStoreStatic",
            "designerId": "b547dd3a-fee0-43ed-ae0c-7a795ccc0019"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menuView",
                "selector": "dataview#menuView"
            },
            "name": "menuView",
            "designerId": "fd259801-d280-4eac-8226-fe94938b00b4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#syncLocalStorage",
                "designer|targetType": "Ext.Button",
                "fn": "syncLocalStorageToDB",
                "implHandler": [
                    "var me = this;\r",
                    "Ext.Msg.confirm(\"Go online\", \r",
                    "                \"Are you sure you want to go online? All local data will be synced with server\", \r",
                    "      function(btn){\r",
                    "    if (btn == 'yes'){\r",
                    "        //sync race start\r",
                    "        var raceStore = CreateStore('raceseriesdivision');\r",
                    "        Ext.Viewport.setMasked({\r",
                    "            xtype: 'loadmask',\r",
                    "            message: 'Going online'\r",
                    "        });\r",
                    "        raceStore.execConfig({\r",
                    "            params: {},\r",
                    "            callback:function(data,operation,d,f){\r",
                    "                var filters =[{property: \"sysrowstate\", value: '3'}],\r",
                    "                    items = [];\r",
                    "                this.filter(filters);\r",
                    "                this.each(function(record)\r",
                    "                {\r",
                    "                    items.push(record.data);\r",
                    "                });\r",
                    "                localStorage.goOffline = \"\";\r",
                    "                AJAXCommand({\r",
                    "                    params: {\r",
                    "                        raceseriesdivision: items\r",
                    "                    },\r",
                    "                    method: 'SyncRaceStartLS',\r",
                    "                    callback: function(status, message, obj, scope) {\r",
                    "                        Ext.Viewport.setMasked(false);\r",
                    "                        if (status) {\r",
                    "                            \r",
                    "                            var db = openDatabase('Sencha', '1.0', 'Sencha Database', 5 * 1024 * 1024);\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE raceboatSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE raceSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE raceboatdivisionSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE raceseriesdivisionSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE menuSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE fieldsSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE configurationsSQL');\r",
                    "                            });\r",
                    "                            db.transaction(function (tx) {\r",
                    "                                tx.executeSql('DROP TABLE entitySQL');\r",
                    "                            });\r",
                    "                            localStorage.goOffline = \"\";\r",
                    "                            \r",
                    "                            me.getLoadLocalStorage().setHidden(false);\r",
                    "                            me.getSyncLocalStorage().setHidden(true);\r",
                    "                            me.getSyncLocalStorage().setStyle('color:white;');\r",
                    "                        }\r",
                    "                        else\r",
                    "                        {\r",
                    "        \r",
                    "                            localStorage.goOffline = \"true\";\r",
                    "                            Ext.Msg.alert( 'Sync', 'Failed to sync Race Start');\r",
                    "        \r",
                    "                        }\r",
                    "                    }\r",
                    "                });\r",
                    "        \r",
                    "            }});// to set sql proxy to store\r",
                    "\r",
                    "    }\r",
                    "});"
                ],
                "name": "tap"
            },
            "name": "syncLocalStorageToDB",
            "designerId": "808a2d02-9363-4d02-adbb-16ae72513da4"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "syncLocalStorage",
                "selector": "button#syncLocalStorage"
            },
            "name": "syncLocalStorage",
            "designerId": "28030531-1793-40a1-86a4-d4a775773bdc"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "loadLocalStorage",
                "selector": "button#loadLocalStorage"
            },
            "name": "loadLocalStorage",
            "designerId": "a4240065-27f4-4ace-af63-d4884611a72c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#takeBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onTakeButtonTap",
                "implHandler": [
                    "/*\r",
                    "navigator.camera.getPicture(onPhotoDataSuccess, onFail, {\r",
                    "    quality: 50,\r",
                    "    targetWidth: 600,\r",
                    "    targetHeight: 600,\r",
                    "    correctOrientation: 1,\r",
                    "    saveToPhotoAlbum: 1\r",
                    "    });\r",
                    "return;\r",
                    "*/\r",
                    "Ext.device.Camera.capture({\r",
                    "    success: function(image) {\r",
                    "        //alert (image);\r",
                    "        //return;\r",
                    "        alert('1');\r",
                    "        me.getMatchPhoto().setSrc(image);\r",
                    "        return;\r",
                    "        Ext.getCmp('matchPhoto').setSrc('data:image/jpg;base64,' + image);\r",
                    "        var base64String = image.trim();\r",
                    "        base64String = base64String.replace(/(\\n)/gm,'');\r",
                    "        this.imageData = base64String;\r",
                    "    },\r",
                    "    failure: function(message){\r",
                    "        Ext.Msg.alert('', 'Failed because: ' + message, Ext.emptyFn);\r",
                    "    },\r",
                    "    quality: 100,\r",
                    "    source: 'camera',\r",
                    "    scope: this,\r",
                    "    destination: 'data',\r",
                    "    encoding: 'jpg',\r",
                    "    width: 300,\r",
                    "    height: 300\r",
                    "\r",
                    "});//, this, 'file', 'png', 400, 400);"
                ],
                "name": "tap"
            },
            "name": "onTakeButtonTap",
            "designerId": "8bcc292c-16d7-422c-aebb-392df1b6d5c4"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#uploadBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onUploadFileButtonTap",
                "implHandler": [
                    "var me = this;\r",
                    "Ext.Ajax.request({\r",
                    "        url : AJAX_URL + 'HTTPFileUpload.php',\r",
                    "        method : 'POST',\r",
                    "        params : {info:me.imageData},\r",
                    "        success : function (response) {\r",
                    "\r",
                    "        },\r",
                    "        failure: function(response) {\r",
                    "\r",
                    "            Ext.Msg.alert('', 'Server-side failure with status code ' + response.status, Ext.emptyFn);\r",
                    "        }\r",
                    "    });"
                ],
                "name": "tap"
            },
            "name": "onUploadFileButtonTap",
            "designerId": "697b619b-5039-49d1-865c-0f91216eac6e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "matchPhoto",
                "selector": "image#matchPhoto"
            },
            "name": "matchPhoto",
            "designerId": "5a3e04f7-d8ac-4acf-8e3b-d92be0c0e12d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainCt",
                "selector": "container#mainCtId"
            },
            "name": "mainCt",
            "designerId": "f6302443-f90a-408e-af51-d3804ff3195f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#tcCancelBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onTCCancelTap",
                "implHandler": [
                    "//this.onNavigate();"
                ],
                "name": "tap"
            },
            "name": "onTCCancelTap",
            "designerId": "a351dc94-f3b9-4036-aca1-5a84e3489b8a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#tcOKBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onTCOKTap",
                "implHandler": [
                    "//this.applyClass('SignOnWizard');\r",
                    "//this.getTopCardLbl().setHtml('Canberra Yacht Club - Sign On Wizard');\r",
                    ""
                ],
                "name": "tap"
            },
            "name": "onTCOKTap",
            "designerId": "9ce052a5-d06d-48e1-9f61-005060ecbade"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#genericNextBtn",
                "designer|targetType": "Ext.Button",
                "fn": "onGenericNextButtonTap",
                "implHandler": [
                    "var me = this,",
                    "    panel;",
                    "",
                    "function nextC(){",
                    "    Ext.Viewport.setMasked(true);",
                    "",
                    "    new Ext.util.DelayedTask(function(){",
                    "",
                    "        me.getHomePanel().removeAll(true,true);",
                    "        panel = Ext.create('DynaMightMobile.view.' + button.config.xurl);",
                    "        me.getHomePanel().add(panel);",
                    "",
                    "        Ext.Viewport.setMasked(false);",
                    "    }).delay(250);",
                    "}",
                    "if(button.config.xurl == 'RFRace'){",
                    "    Ext.Msg.confirm(\"Confirm finish\", \"Are you sure you want to finish the race?\", function(btn){",
                    "        if (btn == 'yes'){",
                    "            nextC();",
                    "        }",
                    "    });",
                    "",
                    "}",
                    "else{",
                    "    nextC();",
                    "}"
                ],
                "name": "tap"
            },
            "name": "onGenericNextButtonTap",
            "designerId": "0e0e02d5-87b0-4c84-85ac-cec0a82da4dc"
        }
    ]
}